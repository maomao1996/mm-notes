import{_ as s,o as n,g as a,Q as l}from"./chunks/framework.4c5231b1.js";const m=JSON.parse('{"title":"clsx 源码阅读","description":"","frontmatter":{},"headers":[],"relativePath":"analysis/utils/clsx.md","filePath":"analysis/utils/clsx.md","lastUpdated":1678627478000}'),p={name:"analysis/utils/clsx.md"},o=l(`<h1 id="clsx-源码阅读" tabindex="-1"><code>clsx</code> 源码阅读 <a class="header-anchor" href="#clsx-源码阅读" aria-label="Permalink to &quot;\`clsx\` 源码阅读&quot;">​</a></h1><p><a href="https://github.com/lukeed/clsx" target="_blank" rel="noreferrer">clsx</a> 轻量级工具库，用于有条件的拼接类名</p><h5 id="相似库" tabindex="-1">相似库 <a class="header-anchor" href="#相似库" aria-label="Permalink to &quot;相似库&quot;">​</a></h5><ul><li><a href="https://github.com/JedWatson/classnames" target="_blank" rel="noreferrer">classnames</a></li></ul><h2 id="clsx-使用方式" tabindex="-1"><code>clsx</code> 使用方式 <a class="header-anchor" href="#clsx-使用方式" aria-label="Permalink to &quot;\`clsx\` 使用方式&quot;">​</a></h2><p><code>clsx</code> 函数可以接受任意数量的参数，每个参数可以是对象、数组、布尔值、字符串或数值，经过处理后会返回一个字符串</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> clsx </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;clsx&#39;</span></span>
<span class="line"><span style="color:#6A737D;">// or</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { clsx } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;clsx&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// Strings (variadic)</span></span>
<span class="line"><span style="color:#B392F0;">clsx</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;foo&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;bar&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;baz&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#6A737D;">//=&gt; &#39;foo bar baz&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// Objects</span></span>
<span class="line"><span style="color:#B392F0;">clsx</span><span style="color:#E1E4E8;">({ foo: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">, bar: </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">, baz: </span><span style="color:#B392F0;">isTrue</span><span style="color:#E1E4E8;">() })</span></span>
<span class="line"><span style="color:#6A737D;">//=&gt; &#39;foo baz&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// Objects (variadic)</span></span>
<span class="line"><span style="color:#B392F0;">clsx</span><span style="color:#E1E4E8;">({ foo: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;"> }, { bar: </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;"> }, </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">, { </span><span style="color:#9ECBFF;">&#39;--foobar&#39;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;hello&#39;</span><span style="color:#E1E4E8;"> })</span></span>
<span class="line"><span style="color:#6A737D;">//=&gt; &#39;foo --foobar&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// Arrays</span></span>
<span class="line"><span style="color:#B392F0;">clsx</span><span style="color:#E1E4E8;">([</span><span style="color:#9ECBFF;">&#39;foo&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;bar&#39;</span><span style="color:#E1E4E8;">])</span></span>
<span class="line"><span style="color:#6A737D;">//=&gt; &#39;foo bar&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// Arrays (variadic)</span></span>
<span class="line"><span style="color:#B392F0;">clsx</span><span style="color:#E1E4E8;">([</span><span style="color:#9ECBFF;">&#39;foo&#39;</span><span style="color:#E1E4E8;">], [</span><span style="color:#9ECBFF;">&#39;&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;bar&#39;</span><span style="color:#E1E4E8;">], [[</span><span style="color:#9ECBFF;">&#39;baz&#39;</span><span style="color:#E1E4E8;">, [[</span><span style="color:#9ECBFF;">&#39;hello&#39;</span><span style="color:#E1E4E8;">], </span><span style="color:#9ECBFF;">&#39;there&#39;</span><span style="color:#E1E4E8;">]]])</span></span>
<span class="line"><span style="color:#6A737D;">//=&gt; &#39;foo bar baz hello there&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// Kitchen sink (with nesting)</span></span>
<span class="line"><span style="color:#B392F0;">clsx</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;foo&#39;</span><span style="color:#E1E4E8;">, [</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;bar&#39;</span><span style="color:#E1E4E8;">, { baz: </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">, bat: </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> }, [</span><span style="color:#9ECBFF;">&#39;hello&#39;</span><span style="color:#E1E4E8;">, [</span><span style="color:#9ECBFF;">&#39;world&#39;</span><span style="color:#E1E4E8;">]]], </span><span style="color:#9ECBFF;">&#39;cya&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#6A737D;">//=&gt; &#39;foo bar hello world cya&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 假值和单独的布尔值都会被过滤</span></span>
<span class="line"><span style="color:#B392F0;">clsx</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">undefined</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">NaN</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#6A737D;">//=&gt; &#39;&#39;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> clsx </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;clsx&#39;</span></span>
<span class="line"><span style="color:#6A737D;">// or</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { clsx } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;clsx&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// Strings (variadic)</span></span>
<span class="line"><span style="color:#6F42C1;">clsx</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;foo&#39;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">true</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;bar&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;baz&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#6A737D;">//=&gt; &#39;foo bar baz&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// Objects</span></span>
<span class="line"><span style="color:#6F42C1;">clsx</span><span style="color:#24292E;">({ foo: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">, bar: </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">, baz: </span><span style="color:#6F42C1;">isTrue</span><span style="color:#24292E;">() })</span></span>
<span class="line"><span style="color:#6A737D;">//=&gt; &#39;foo baz&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// Objects (variadic)</span></span>
<span class="line"><span style="color:#6F42C1;">clsx</span><span style="color:#24292E;">({ foo: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;"> }, { bar: </span><span style="color:#005CC5;">false</span><span style="color:#24292E;"> }, </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">, { </span><span style="color:#032F62;">&#39;--foobar&#39;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;hello&#39;</span><span style="color:#24292E;"> })</span></span>
<span class="line"><span style="color:#6A737D;">//=&gt; &#39;foo --foobar&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// Arrays</span></span>
<span class="line"><span style="color:#6F42C1;">clsx</span><span style="color:#24292E;">([</span><span style="color:#032F62;">&#39;foo&#39;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;bar&#39;</span><span style="color:#24292E;">])</span></span>
<span class="line"><span style="color:#6A737D;">//=&gt; &#39;foo bar&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// Arrays (variadic)</span></span>
<span class="line"><span style="color:#6F42C1;">clsx</span><span style="color:#24292E;">([</span><span style="color:#032F62;">&#39;foo&#39;</span><span style="color:#24292E;">], [</span><span style="color:#032F62;">&#39;&#39;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;bar&#39;</span><span style="color:#24292E;">], [[</span><span style="color:#032F62;">&#39;baz&#39;</span><span style="color:#24292E;">, [[</span><span style="color:#032F62;">&#39;hello&#39;</span><span style="color:#24292E;">], </span><span style="color:#032F62;">&#39;there&#39;</span><span style="color:#24292E;">]]])</span></span>
<span class="line"><span style="color:#6A737D;">//=&gt; &#39;foo bar baz hello there&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// Kitchen sink (with nesting)</span></span>
<span class="line"><span style="color:#6F42C1;">clsx</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;foo&#39;</span><span style="color:#24292E;">, [</span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;bar&#39;</span><span style="color:#24292E;">, { baz: </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">, bat: </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> }, [</span><span style="color:#032F62;">&#39;hello&#39;</span><span style="color:#24292E;">, [</span><span style="color:#032F62;">&#39;world&#39;</span><span style="color:#24292E;">]]], </span><span style="color:#032F62;">&#39;cya&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#6A737D;">//=&gt; &#39;foo bar hello world cya&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 假值和单独的布尔值都会被过滤</span></span>
<span class="line"><span style="color:#6F42C1;">clsx</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;&#39;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">undefined</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">NaN</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#6A737D;">//=&gt; &#39;&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br></div></div><h2 id="clsx-源码笔记" tabindex="-1"><code>clsx</code> 源码笔记 <a class="header-anchor" href="#clsx-源码笔记" aria-label="Permalink to &quot;\`clsx\` 源码笔记&quot;">​</a></h2><blockquote><p><strong>当前 clsx 源码版本为 v1.2.1</strong></p></blockquote><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 对参数进行类型判断并做相应处理</span></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">toVal</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">mix</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> k,</span></span>
<span class="line"><span style="color:#E1E4E8;">    y,</span></span>
<span class="line"><span style="color:#E1E4E8;">    str </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 当参数 mix 为字符串和数值时直接拼接</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">typeof</span><span style="color:#E1E4E8;"> mix </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;string&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">typeof</span><span style="color:#E1E4E8;"> mix </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;number&#39;</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    str </span><span style="color:#F97583;">+=</span><span style="color:#E1E4E8;"> mix</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 当参数 mix 为对象时</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">typeof</span><span style="color:#E1E4E8;"> mix </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;object&#39;</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 当参数 mix 为数组时对其进行遍历并递归调用 toVal</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (Array.</span><span style="color:#B392F0;">isArray</span><span style="color:#E1E4E8;">(mix)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (k </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; k </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> mix.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;">; k</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (mix[k]) {</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> ((y </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">toVal</span><span style="color:#E1E4E8;">(mix[k]))) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            str </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> (str </span><span style="color:#F97583;">+=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39; &#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">            str </span><span style="color:#F97583;">+=</span><span style="color:#E1E4E8;"> y</span></span>
<span class="line"><span style="color:#E1E4E8;">          }</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// 遍历对象的属性，把属性值为真的属性名拼接成字符串</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (k </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> mix) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (mix[k]) {</span></span>
<span class="line"><span style="color:#E1E4E8;">          str </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> (str </span><span style="color:#F97583;">+=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39; &#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">          str </span><span style="color:#F97583;">+=</span><span style="color:#E1E4E8;"> k</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> str</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 接收多个参数并返回一个字符串</span></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">clsx</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    tmp,</span></span>
<span class="line"><span style="color:#E1E4E8;">    x,</span></span>
<span class="line"><span style="color:#E1E4E8;">    str </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 遍历 arguments</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;"> (i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">arguments</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 对 tmp 赋值，并判断其是否为真值</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> ((tmp </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">arguments</span><span style="color:#E1E4E8;">[i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">])) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// 调用 toVal 方法对 tmp 进行处理，如果处理结果为真，则进行字符串拼接</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> ((x </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">toVal</span><span style="color:#E1E4E8;">(tmp))) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        str </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> (str </span><span style="color:#F97583;">+=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39; &#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">        str </span><span style="color:#F97583;">+=</span><span style="color:#E1E4E8;"> x</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> str</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> clsx</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 对参数进行类型判断并做相应处理</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">toVal</span><span style="color:#24292E;">(</span><span style="color:#E36209;">mix</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> k,</span></span>
<span class="line"><span style="color:#24292E;">    y,</span></span>
<span class="line"><span style="color:#24292E;">    str </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 当参数 mix 为字符串和数值时直接拼接</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">typeof</span><span style="color:#24292E;"> mix </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;string&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">typeof</span><span style="color:#24292E;"> mix </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;number&#39;</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    str </span><span style="color:#D73A49;">+=</span><span style="color:#24292E;"> mix</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 当参数 mix 为对象时</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">typeof</span><span style="color:#24292E;"> mix </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;object&#39;</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 当参数 mix 为数组时对其进行遍历并递归调用 toVal</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (Array.</span><span style="color:#6F42C1;">isArray</span><span style="color:#24292E;">(mix)) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (k </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; k </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> mix.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;">; k</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (mix[k]) {</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> ((y </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">toVal</span><span style="color:#24292E;">(mix[k]))) {</span></span>
<span class="line"><span style="color:#24292E;">            str </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> (str </span><span style="color:#D73A49;">+=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39; &#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">            str </span><span style="color:#D73A49;">+=</span><span style="color:#24292E;"> y</span></span>
<span class="line"><span style="color:#24292E;">          }</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// 遍历对象的属性，把属性值为真的属性名拼接成字符串</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (k </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> mix) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (mix[k]) {</span></span>
<span class="line"><span style="color:#24292E;">          str </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> (str </span><span style="color:#D73A49;">+=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39; &#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">          str </span><span style="color:#D73A49;">+=</span><span style="color:#24292E;"> k</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> str</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 接收多个参数并返回一个字符串</span></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">clsx</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    tmp,</span></span>
<span class="line"><span style="color:#24292E;">    x,</span></span>
<span class="line"><span style="color:#24292E;">    str </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 遍历 arguments</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">arguments</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 对 tmp 赋值，并判断其是否为真值</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> ((tmp </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">arguments</span><span style="color:#24292E;">[i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">])) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// 调用 toVal 方法对 tmp 进行处理，如果处理结果为真，则进行字符串拼接</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> ((x </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">toVal</span><span style="color:#24292E;">(tmp))) {</span></span>
<span class="line"><span style="color:#24292E;">        str </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> (str </span><span style="color:#D73A49;">+=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39; &#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        str </span><span style="color:#D73A49;">+=</span><span style="color:#24292E;"> x</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> str</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> clsx</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br></div></div>`,10),e=[o];function c(r,t,E,y,i,b){return n(),a("div",null,e)}const u=s(p,[["render",c]]);export{m as __pageData,u as default};
