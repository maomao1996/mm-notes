import{_ as s,o as n,g as a,Q as l}from"./chunks/framework.308e1374.js";const u=JSON.parse('{"title":"commitLayoutEffects","description":"茂茂的 React v18.2.0 源码阅读笔记 —— commitLayoutEffects","frontmatter":{"description":"茂茂的 React v18.2.0 源码阅读笔记 —— commitLayoutEffects","pageId":"/analysis/react/18.2.0/process/commitLayoutEffects"},"headers":[],"relativePath":"analysis/react/18.2.0/process/commit-layout-effects.md","filePath":"analysis/react/18.2.0/process/commit-layout-effects.md","lastUpdated":1706776717000}'),p={name:"analysis/react/18.2.0/process/commit-layout-effects.md"},e=l(`<h1 id="commitlayouteffects" tabindex="-1"><code>commitLayoutEffects</code> <a class="header-anchor" href="#commitlayouteffects" aria-label="Permalink to &quot;\`commitLayoutEffects\`&quot;">​</a></h1><p>在 <code>commitRootImpl()</code> 中会调用 <code>commitLayoutEffects</code>，进入 <strong>layout 阶段</strong>（即执行 DOM 操作后）</p><p>这个阶段的执行过程和 <strong>before mutation 阶段</strong> 类似，一样存在 <strong>“递”</strong> 和 <strong>“归”</strong> 的逻辑，通过深度优先遍历，找到最后一个有 <code>LayoutMask</code> 标记的 Fiber，然后从下往上调用 <code>complete</code> 逻辑</p><div class="language-ts vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">commitLayoutEffects</span><span style="color:#E1E4E8;">(finishedWork, root, lanes)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">commitLayoutEffects</span><span style="color:#24292E;">(finishedWork, root, lanes)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><blockquote><p>源码地址 <a href="https://github.com/maomao1996/code-analysis/blob/c0b1b3529c628ba6b2b81bdbc6d212f666b2f20f/react-v18.2.0/src/react/packages/react-reconciler/src/ReactFiberCommitWork.old.js#L2459" target="_blank" rel="noreferrer">commitLayoutEffects() | react-reconciler/src/ReactFiberCommitWork.old.js</a></p></blockquote><div class="language-ts vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark has-highlighted-lines vp-code-dark"><code><span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">commitLayoutEffects</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FFAB70;">finishedWork</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Fiber</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FFAB70;">root</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">FiberRoot</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FFAB70;">committedLanes</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Lanes</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">void</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  inProgressLanes </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> committedLanes</span></span>
<span class="line"><span style="color:#E1E4E8;">  inProgressRoot </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> root</span></span>
<span class="line"><span style="color:#E1E4E8;">  nextEffect </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> finishedWork</span></span>
<span class="line"></span>
<span class="line highlighted"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 处理 layout 阶段的副作用</span></span>
<span class="line highlighted"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">commitLayoutEffects_begin</span><span style="color:#E1E4E8;">(finishedWork, root, committedLanes)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  inProgressLanes </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span></span>
<span class="line"><span style="color:#E1E4E8;">  inProgressRoot </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light has-highlighted-lines vp-code-light"><code><span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">commitLayoutEffects</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">finishedWork</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Fiber</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">root</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">FiberRoot</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">committedLanes</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Lanes</span></span>
<span class="line"><span style="color:#24292E;">)</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">void</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  inProgressLanes </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> committedLanes</span></span>
<span class="line"><span style="color:#24292E;">  inProgressRoot </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> root</span></span>
<span class="line"><span style="color:#24292E;">  nextEffect </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> finishedWork</span></span>
<span class="line"></span>
<span class="line highlighted"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 处理 layout 阶段的副作用</span></span>
<span class="line highlighted"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">commitLayoutEffects_begin</span><span style="color:#24292E;">(finishedWork, root, committedLanes)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  inProgressLanes </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span></span>
<span class="line"><span style="color:#24292E;">  inProgressRoot </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><h2 id="commitlayouteffects-begin" tabindex="-1"><code>commitLayoutEffects_begin</code> <a class="header-anchor" href="#commitlayouteffects-begin" aria-label="Permalink to &quot;\`commitLayoutEffects_begin\`&quot;">​</a></h2><blockquote><p>源码地址 <a href="https://github.com/maomao1996/code-analysis/blob/c0b1b3529c628ba6b2b81bdbc6d212f666b2f20f/react-v18.2.0/src/react/packages/react-reconciler/src/ReactFiberCommitWork.old.js#L2474" target="_blank" rel="noreferrer">commitLayoutEffects_begin() | react-reconciler/src/ReactFiberCommitWork.old.js</a></p></blockquote><div class="language-ts vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark has-highlighted-lines vp-code-dark"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">commitLayoutEffects_begin</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">subtreeRoot</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Fiber</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">root</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">FiberRoot</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">committedLanes</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Lanes</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// Suspense layout effects semantics don&#39;t change for legacy roots.</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">isModernRoot</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (subtreeRoot.mode </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> ConcurrentMode) </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> NoMode</span></span>
<span class="line"></span>
<span class="line highlighted"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 对 Fiber 树进行深度优先遍历，当找到符合条件的节点时开始执行对应的操作</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;"> (nextEffect </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">fiber</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> nextEffect</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">firstChild</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> fiber.child</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (enableSuspenseLayoutEffectSemantics </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> fiber.tag </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> OffscreenComponent </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> isModernRoot) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// ... 省略 OffscreenComponent 组件的处理逻辑</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">continue</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line highlighted"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 找最后一个有 LayoutMask 标记的 Fiber</span></span>
<span class="line highlighted"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span></span>
<span class="line highlighted"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// 判断当前 Fiber 的子 Fiber 树中是否存在 LayoutMask 副作用（即 Update | Callback | Ref | Visibility）</span></span>
<span class="line highlighted"><span style="color:#E1E4E8;">      (fiber.subtreeFlags </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> LayoutMask) </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> NoFlags </span><span style="color:#F97583;">&amp;&amp;</span></span>
<span class="line highlighted"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// 判断当前 Fiber 是否存在子 Fiber</span></span>
<span class="line highlighted"><span style="color:#E1E4E8;">      firstChild </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span></span>
<span class="line highlighted"><span style="color:#E1E4E8;">    ) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// 更新指针</span></span>
<span class="line"><span style="color:#E1E4E8;">      firstChild.return </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> fiber</span></span>
<span class="line"><span style="color:#E1E4E8;">      nextEffect </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> firstChild</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line highlighted"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// 找最后一个带有 LayoutMask 标识的 Fiber 时，进入该 Fiber 的 complete 阶段</span></span>
<span class="line highlighted"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">commitLayoutMountEffects_complete</span><span style="color:#E1E4E8;">(subtreeRoot, root, committedLanes)</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light has-highlighted-lines vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">commitLayoutEffects_begin</span><span style="color:#24292E;">(</span><span style="color:#E36209;">subtreeRoot</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Fiber</span><span style="color:#24292E;">, </span><span style="color:#E36209;">root</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">FiberRoot</span><span style="color:#24292E;">, </span><span style="color:#E36209;">committedLanes</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Lanes</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// Suspense layout effects semantics don&#39;t change for legacy roots.</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">isModernRoot</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (subtreeRoot.mode </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> ConcurrentMode) </span><span style="color:#D73A49;">!==</span><span style="color:#24292E;"> NoMode</span></span>
<span class="line"></span>
<span class="line highlighted"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 对 Fiber 树进行深度优先遍历，当找到符合条件的节点时开始执行对应的操作</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (nextEffect </span><span style="color:#D73A49;">!==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">fiber</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> nextEffect</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">firstChild</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> fiber.child</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (enableSuspenseLayoutEffectSemantics </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> fiber.tag </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> OffscreenComponent </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> isModernRoot) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// ... 省略 OffscreenComponent 组件的处理逻辑</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">continue</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line highlighted"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 找最后一个有 LayoutMask 标记的 Fiber</span></span>
<span class="line highlighted"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span></span>
<span class="line highlighted"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// 判断当前 Fiber 的子 Fiber 树中是否存在 LayoutMask 副作用（即 Update | Callback | Ref | Visibility）</span></span>
<span class="line highlighted"><span style="color:#24292E;">      (fiber.subtreeFlags </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> LayoutMask) </span><span style="color:#D73A49;">!==</span><span style="color:#24292E;"> NoFlags </span><span style="color:#D73A49;">&amp;&amp;</span></span>
<span class="line highlighted"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// 判断当前 Fiber 是否存在子 Fiber</span></span>
<span class="line highlighted"><span style="color:#24292E;">      firstChild </span><span style="color:#D73A49;">!==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span></span>
<span class="line highlighted"><span style="color:#24292E;">    ) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// 更新指针</span></span>
<span class="line"><span style="color:#24292E;">      firstChild.return </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> fiber</span></span>
<span class="line"><span style="color:#24292E;">      nextEffect </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> firstChild</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line highlighted"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// 找最后一个带有 LayoutMask 标识的 Fiber 时，进入该 Fiber 的 complete 阶段</span></span>
<span class="line highlighted"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">commitLayoutMountEffects_complete</span><span style="color:#24292E;">(subtreeRoot, root, committedLanes)</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br></div></div><h2 id="commitlayoutmounteffects-complete" tabindex="-1"><code>commitLayoutMountEffects_complete</code> <a class="header-anchor" href="#commitlayoutmounteffects-complete" aria-label="Permalink to &quot;\`commitLayoutMountEffects_complete\`&quot;">​</a></h2><blockquote><p>源码地址 <a href="https://github.com/maomao1996/code-analysis/blob/c0b1b3529c628ba6b2b81bdbc6d212f666b2f20f/react-v18.2.0/src/react/packages/react-reconciler/src/ReactFiberCommitWork.old.js#L2548" target="_blank" rel="noreferrer">commitLayoutMountEffects_complete() | react-reconciler/src/ReactFiberCommitWork.old.js</a></p></blockquote><div class="language-ts vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark has-highlighted-lines vp-code-dark"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">commitLayoutMountEffects_complete</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FFAB70;">subtreeRoot</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Fiber</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FFAB70;">root</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">FiberRoot</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FFAB70;">committedLanes</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Lanes</span></span>
<span class="line"><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;"> (nextEffect </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">fiber</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> nextEffect</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> ((fiber.flags </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> LayoutMask) </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> NoFlags) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">current</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> fiber.alternate</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line highlighted"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// layout 阶段的主要函数（执行对应生命周期钩子和 Hook）</span></span>
<span class="line highlighted"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">commitLayoutEffectOnFiber</span><span style="color:#E1E4E8;">(root, current, fiber, committedLanes)</span></span>
<span class="line"><span style="color:#E1E4E8;">      } </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (error) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">captureCommitPhaseError</span><span style="color:#E1E4E8;">(fiber, fiber.return, error)</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (fiber </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> subtreeRoot) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      nextEffect </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">sibling</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> fiber.sibling</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 判断是否存在兄弟节点</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (sibling </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// 当存在兄弟节点时更新指针并返回到 begin 方法继续向下遍历</span></span>
<span class="line"><span style="color:#E1E4E8;">      sibling.return </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> fiber.return</span></span>
<span class="line"><span style="color:#E1E4E8;">      nextEffect </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> sibling</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 更新指针为父节点</span></span>
<span class="line"><span style="color:#E1E4E8;">    nextEffect </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> fiber.return</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light has-highlighted-lines vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">commitLayoutMountEffects_complete</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">subtreeRoot</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Fiber</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">root</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">FiberRoot</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">committedLanes</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Lanes</span></span>
<span class="line"><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (nextEffect </span><span style="color:#D73A49;">!==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">fiber</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> nextEffect</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> ((fiber.flags </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> LayoutMask) </span><span style="color:#D73A49;">!==</span><span style="color:#24292E;"> NoFlags) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">current</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> fiber.alternate</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line highlighted"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// layout 阶段的主要函数（执行对应生命周期钩子和 Hook）</span></span>
<span class="line highlighted"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">commitLayoutEffectOnFiber</span><span style="color:#24292E;">(root, current, fiber, committedLanes)</span></span>
<span class="line"><span style="color:#24292E;">      } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (error) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">captureCommitPhaseError</span><span style="color:#24292E;">(fiber, fiber.return, error)</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (fiber </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> subtreeRoot) {</span></span>
<span class="line"><span style="color:#24292E;">      nextEffect </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">sibling</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> fiber.sibling</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 判断是否存在兄弟节点</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (sibling </span><span style="color:#D73A49;">!==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// 当存在兄弟节点时更新指针并返回到 begin 方法继续向下遍历</span></span>
<span class="line"><span style="color:#24292E;">      sibling.return </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> fiber.return</span></span>
<span class="line"><span style="color:#24292E;">      nextEffect </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> sibling</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 更新指针为父节点</span></span>
<span class="line"><span style="color:#24292E;">    nextEffect </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> fiber.return</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br></div></div><h3 id="commitlayouteffectonfiber" tabindex="-1"><code>commitLayoutEffectOnFiber</code> <a class="header-anchor" href="#commitlayouteffectonfiber" aria-label="Permalink to &quot;\`commitLayoutEffectOnFiber\`&quot;">​</a></h3><p><code>commitLayoutEffectOnFiber</code> 函数是 layout 阶段的主要函数，其内部会根据 <code>finishedWork.tag</code> 来调用对应生命周期钩子和 Hook</p><ul><li><code>FunctionComponent</code>、<code>ForwardRef</code>、<code>SimpleMemoComponent</code>：执行 <code>useLayoutEffect</code> 挂载函数</li><li><code>ClassComponent</code>：执行 <code>componentDidMount</code> 或 <code>componentDidUpdate</code> 生命周期函数</li></ul><blockquote><p>源码地址 <a href="https://github.com/maomao1996/code-analysis/blob/c0b1b3529c628ba6b2b81bdbc6d212f666b2f20f/react-v18.2.0/src/react/packages/react-reconciler/src/ReactFiberCommitWork.old.js#L702" target="_blank" rel="noreferrer">commitLayoutEffectOnFiber() | react-reconciler/src/ReactFiberCommitWork.old.js</a></p></blockquote><div class="language-ts vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark has-highlighted-lines vp-code-dark"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">commitLayoutEffectOnFiber</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FFAB70;">finishedRoot</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">FiberRoot</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FFAB70;">current</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Fiber</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FFAB70;">finishedWork</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Fiber</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FFAB70;">committedLanes</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Lanes</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">void</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> ((finishedWork.flags </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> LayoutMask) </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> NoFlags) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">switch</span><span style="color:#E1E4E8;"> (finishedWork.tag) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> FunctionComponent:</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> ForwardRef:</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> SimpleMemoComponent: {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">enableSuspenseLayoutEffectSemantics </span><span style="color:#F97583;">||</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">offscreenSubtreeWasHidden</span></span>
<span class="line"><span style="color:#E1E4E8;">        ) {</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#6A737D;">// At this point layout effects have already been destroyed (during mutation phase).</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#6A737D;">// This is done to prevent sibling component effects from interfering with each other,</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#6A737D;">// e.g. a destroy function in one component should never override a ref set</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#6A737D;">// by a create function in another component during the same commit.</span></span>
<span class="line"></span>
<span class="line highlighted"><span style="color:#E1E4E8;">          </span><span style="color:#6A737D;">// 执行 useLayoutEffect 挂载函数</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span></span>
<span class="line"><span style="color:#E1E4E8;">            enableProfilerTimer </span><span style="color:#F97583;">&amp;&amp;</span></span>
<span class="line"><span style="color:#E1E4E8;">            enableProfilerCommitHooks </span><span style="color:#F97583;">&amp;&amp;</span></span>
<span class="line"><span style="color:#E1E4E8;">            finishedWork.mode </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> ProfileMode</span></span>
<span class="line"><span style="color:#E1E4E8;">          ) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">              </span><span style="color:#B392F0;">startLayoutEffectTimer</span><span style="color:#E1E4E8;">();</span></span>
<span class="line highlighted"><span style="color:#E1E4E8;">              </span><span style="color:#B392F0;">commitHookEffectListMount</span><span style="color:#E1E4E8;">(HookLayout </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> HookHasEffect, finishedWork);</span></span>
<span class="line"><span style="color:#E1E4E8;">            } </span><span style="color:#F97583;">finally</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line highlighted"><span style="color:#E1E4E8;">              </span><span style="color:#B392F0;">recordLayoutEffectDuration</span><span style="color:#E1E4E8;">(finishedWork);</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">          } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#B392F0;">commitHookEffectListMount</span><span style="color:#E1E4E8;">(HookLayout </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> HookHasEffect, finishedWork);</span></span>
<span class="line"><span style="color:#E1E4E8;">          }</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">break</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> ClassComponent: {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">instance</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> finishedWork.stateNode;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (finishedWork.flags </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> Update) {</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">offscreenSubtreeWasHidden) {</span></span>
<span class="line highlighted"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 通过 current 判断当前是 mount 还 update</span></span>
<span class="line highlighted"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (current </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">              </span><span style="color:#6A737D;">// We could update instance props and state here,</span></span>
<span class="line"><span style="color:#E1E4E8;">              </span><span style="color:#6A737D;">// but instead we rely on them being set during last render.</span></span>
<span class="line"><span style="color:#E1E4E8;">              </span><span style="color:#6A737D;">// TODO: revisit this when we implement resuming.</span></span>
<span class="line"></span>
<span class="line highlighted"><span style="color:#E1E4E8;">              </span><span style="color:#6A737D;">// 执行类组件的 componentDidMount 生命周期函数</span></span>
<span class="line"><span style="color:#E1E4E8;">              </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span></span>
<span class="line"><span style="color:#E1E4E8;">                enableProfilerTimer </span><span style="color:#F97583;">&amp;&amp;</span></span>
<span class="line"><span style="color:#E1E4E8;">                enableProfilerCommitHooks </span><span style="color:#F97583;">&amp;&amp;</span></span>
<span class="line"><span style="color:#E1E4E8;">                finishedWork.mode </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> ProfileMode</span></span>
<span class="line"><span style="color:#E1E4E8;">              ) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">                  </span><span style="color:#B392F0;">startLayoutEffectTimer</span><span style="color:#E1E4E8;">();</span></span>
<span class="line highlighted"><span style="color:#E1E4E8;">                  instance.</span><span style="color:#B392F0;">componentDidMount</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">                } </span><span style="color:#F97583;">finally</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">                  </span><span style="color:#B392F0;">recordLayoutEffectDuration</span><span style="color:#E1E4E8;">(finishedWork);</span></span>
<span class="line"><span style="color:#E1E4E8;">                }</span></span>
<span class="line"><span style="color:#E1E4E8;">              } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line highlighted"><span style="color:#E1E4E8;">                instance.</span><span style="color:#B392F0;">componentDidMount</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">              }</span></span>
<span class="line"><span style="color:#E1E4E8;">            } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">              </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">prevProps</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span></span>
<span class="line"><span style="color:#E1E4E8;">                finishedWork.elementType </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> finishedWork.type</span></span>
<span class="line"><span style="color:#E1E4E8;">                  </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> current.memoizedProps</span></span>
<span class="line"><span style="color:#E1E4E8;">                  </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">resolveDefaultProps</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">                      finishedWork.type,</span></span>
<span class="line"><span style="color:#E1E4E8;">                      current.memoizedProps,</span></span>
<span class="line"><span style="color:#E1E4E8;">                    );</span></span>
<span class="line"><span style="color:#E1E4E8;">              </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">prevState</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> current.memoizedState;</span></span>
<span class="line"><span style="color:#E1E4E8;">              </span><span style="color:#6A737D;">// We could update instance props and state here,</span></span>
<span class="line"><span style="color:#E1E4E8;">              </span><span style="color:#6A737D;">// but instead we rely on them being set during last render.</span></span>
<span class="line"><span style="color:#E1E4E8;">              </span><span style="color:#6A737D;">// TODO: revisit this when we implement resuming.</span></span>
<span class="line"></span>
<span class="line highlighted"><span style="color:#E1E4E8;">              </span><span style="color:#6A737D;">// 执行类组件的 componentDidUpdate 生命周期函数</span></span>
<span class="line"><span style="color:#E1E4E8;">              </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span></span>
<span class="line"><span style="color:#E1E4E8;">                enableProfilerTimer </span><span style="color:#F97583;">&amp;&amp;</span></span>
<span class="line"><span style="color:#E1E4E8;">                enableProfilerCommitHooks </span><span style="color:#F97583;">&amp;&amp;</span></span>
<span class="line"><span style="color:#E1E4E8;">                finishedWork.mode </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> ProfileMode</span></span>
<span class="line"><span style="color:#E1E4E8;">              ) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">                  </span><span style="color:#B392F0;">startLayoutEffectTimer</span><span style="color:#E1E4E8;">();</span></span>
<span class="line highlighted"><span style="color:#E1E4E8;">                  instance.</span><span style="color:#B392F0;">componentDidUpdate</span><span style="color:#E1E4E8;">(</span></span>
<span class="line highlighted"><span style="color:#E1E4E8;">                    prevProps,</span></span>
<span class="line highlighted"><span style="color:#E1E4E8;">                    prevState,</span></span>
<span class="line highlighted"><span style="color:#E1E4E8;">                    instance.__reactInternalSnapshotBeforeUpdate,</span></span>
<span class="line highlighted"><span style="color:#E1E4E8;">                  );</span></span>
<span class="line"><span style="color:#E1E4E8;">                } </span><span style="color:#F97583;">finally</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">                  </span><span style="color:#B392F0;">recordLayoutEffectDuration</span><span style="color:#E1E4E8;">(finishedWork);</span></span>
<span class="line"><span style="color:#E1E4E8;">                }</span></span>
<span class="line"><span style="color:#E1E4E8;">              } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line highlighted"><span style="color:#E1E4E8;">                instance.</span><span style="color:#B392F0;">componentDidUpdate</span><span style="color:#E1E4E8;">(</span></span>
<span class="line highlighted"><span style="color:#E1E4E8;">                  prevProps,</span></span>
<span class="line highlighted"><span style="color:#E1E4E8;">                  prevState,</span></span>
<span class="line highlighted"><span style="color:#E1E4E8;">                  instance.__reactInternalSnapshotBeforeUpdate,</span></span>
<span class="line highlighted"><span style="color:#E1E4E8;">                );</span></span>
<span class="line"><span style="color:#E1E4E8;">              }</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">          }</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// TODO: I think this is now always non-null by the time it reaches the</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// commit phase. Consider removing the type check.</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">updateQueue</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">UpdateQueue</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (finishedWork.updateQueue: any);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (updateQueue </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#6A737D;">// We could update instance props and state here,</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#6A737D;">// but instead we rely on them being set during last render.</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#6A737D;">// TODO: revisit this when we implement resuming.</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#B392F0;">commitUpdateQueue</span><span style="color:#E1E4E8;">(finishedWork, updateQueue, instance);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">break</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> HostRoot: {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// TODO: I think this is now always non-null by the time it reaches the</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// commit phase. Consider removing the type check.</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">updateQueue</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">UpdateQueue</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (finishedWork.updateQueue: any);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (updateQueue </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> instance </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (finishedWork.child </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">switch</span><span style="color:#E1E4E8;"> (finishedWork.child.tag) {</span></span>
<span class="line"><span style="color:#E1E4E8;">              </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> HostComponent:</span></span>
<span class="line"><span style="color:#E1E4E8;">                instance </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getPublicInstance</span><span style="color:#E1E4E8;">(finishedWork.child.stateNode);</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">break</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">              </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> ClassComponent:</span></span>
<span class="line"><span style="color:#E1E4E8;">                instance </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> finishedWork.child.stateNode;</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">break</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">          }</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#B392F0;">commitUpdateQueue</span><span style="color:#E1E4E8;">(finishedWork, updateQueue, instance);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">break</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> HostComponent: {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">instance</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Instance</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> finishedWork.stateNode;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// Renderers may schedule work to be done after host components are mounted</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// (eg DOM renderer may schedule auto-focus for inputs and form controls).</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// These effects should only be committed when components are first mounted,</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// aka when there is no current/alternate.</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (current </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> finishedWork.flags </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> Update) {</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">type</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> finishedWork.type;</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">props</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> finishedWork.memoizedProps;</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#6A737D;">// 处理表单元素的 autoFocus 属性</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#B392F0;">commitMount</span><span style="color:#E1E4E8;">(instance, type, props, finishedWork);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">break</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> HostText: {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// We have no life-cycles associated with text.</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">break</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> HostPortal: {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// We have no life-cycles associated with portals.</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">break</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// ... 省略以下 case 的处理逻辑</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> Profiler:</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> SuspenseComponent:</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> SuspenseListComponent:</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> IncompleteClassComponent:</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> ScopeComponent:</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> OffscreenComponent:</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> LegacyHiddenComponent:</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> TracingMarkerComponent: {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">break</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Error</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#9ECBFF;">&#39;This unit of work tag should not have side-effects. This error is &#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#9ECBFF;">&#39;likely caused by a bug in React. Please file an issue.&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        );</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 处理 Ref 副作用</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">enableSuspenseLayoutEffectSemantics </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">offscreenSubtreeWasHidden) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (enableScopeAPI) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// TODO: This is a temporary solution that allowed us to transition away</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// from React Flare on www.</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (finishedWork.flags </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> Ref </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> finishedWork.tag </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> ScopeComponent) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">commitAttachRef</span><span style="color:#E1E4E8;">(finishedWork);</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (finishedWork.flags </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> Ref) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">commitAttachRef</span><span style="color:#E1E4E8;">(finishedWork);</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light has-highlighted-lines vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">commitLayoutEffectOnFiber</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">finishedRoot</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">FiberRoot</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">current</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Fiber</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">finishedWork</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Fiber</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">committedLanes</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Lanes</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">)</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">void</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> ((finishedWork.flags </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> LayoutMask) </span><span style="color:#D73A49;">!==</span><span style="color:#24292E;"> NoFlags) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">switch</span><span style="color:#24292E;"> (finishedWork.tag) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> FunctionComponent:</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> ForwardRef:</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> SimpleMemoComponent: {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#D73A49;">!</span><span style="color:#24292E;">enableSuspenseLayoutEffectSemantics </span><span style="color:#D73A49;">||</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#D73A49;">!</span><span style="color:#24292E;">offscreenSubtreeWasHidden</span></span>
<span class="line"><span style="color:#24292E;">        ) {</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#6A737D;">// At this point layout effects have already been destroyed (during mutation phase).</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#6A737D;">// This is done to prevent sibling component effects from interfering with each other,</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#6A737D;">// e.g. a destroy function in one component should never override a ref set</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#6A737D;">// by a create function in another component during the same commit.</span></span>
<span class="line"></span>
<span class="line highlighted"><span style="color:#24292E;">          </span><span style="color:#6A737D;">// 执行 useLayoutEffect 挂载函数</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span></span>
<span class="line"><span style="color:#24292E;">            enableProfilerTimer </span><span style="color:#D73A49;">&amp;&amp;</span></span>
<span class="line"><span style="color:#24292E;">            enableProfilerCommitHooks </span><span style="color:#D73A49;">&amp;&amp;</span></span>
<span class="line"><span style="color:#24292E;">            finishedWork.mode </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> ProfileMode</span></span>
<span class="line"><span style="color:#24292E;">          ) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">              </span><span style="color:#6F42C1;">startLayoutEffectTimer</span><span style="color:#24292E;">();</span></span>
<span class="line highlighted"><span style="color:#24292E;">              </span><span style="color:#6F42C1;">commitHookEffectListMount</span><span style="color:#24292E;">(HookLayout </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> HookHasEffect, finishedWork);</span></span>
<span class="line"><span style="color:#24292E;">            } </span><span style="color:#D73A49;">finally</span><span style="color:#24292E;"> {</span></span>
<span class="line highlighted"><span style="color:#24292E;">              </span><span style="color:#6F42C1;">recordLayoutEffectDuration</span><span style="color:#24292E;">(finishedWork);</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">          } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">commitHookEffectListMount</span><span style="color:#24292E;">(HookLayout </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> HookHasEffect, finishedWork);</span></span>
<span class="line"><span style="color:#24292E;">          }</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">break</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> ClassComponent: {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">instance</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> finishedWork.stateNode;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (finishedWork.flags </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> Update) {</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">offscreenSubtreeWasHidden) {</span></span>
<span class="line highlighted"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 通过 current 判断当前是 mount 还 update</span></span>
<span class="line highlighted"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (current </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">              </span><span style="color:#6A737D;">// We could update instance props and state here,</span></span>
<span class="line"><span style="color:#24292E;">              </span><span style="color:#6A737D;">// but instead we rely on them being set during last render.</span></span>
<span class="line"><span style="color:#24292E;">              </span><span style="color:#6A737D;">// TODO: revisit this when we implement resuming.</span></span>
<span class="line"></span>
<span class="line highlighted"><span style="color:#24292E;">              </span><span style="color:#6A737D;">// 执行类组件的 componentDidMount 生命周期函数</span></span>
<span class="line"><span style="color:#24292E;">              </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span></span>
<span class="line"><span style="color:#24292E;">                enableProfilerTimer </span><span style="color:#D73A49;">&amp;&amp;</span></span>
<span class="line"><span style="color:#24292E;">                enableProfilerCommitHooks </span><span style="color:#D73A49;">&amp;&amp;</span></span>
<span class="line"><span style="color:#24292E;">                finishedWork.mode </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> ProfileMode</span></span>
<span class="line"><span style="color:#24292E;">              ) {</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">                  </span><span style="color:#6F42C1;">startLayoutEffectTimer</span><span style="color:#24292E;">();</span></span>
<span class="line highlighted"><span style="color:#24292E;">                  instance.</span><span style="color:#6F42C1;">componentDidMount</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">                } </span><span style="color:#D73A49;">finally</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">                  </span><span style="color:#6F42C1;">recordLayoutEffectDuration</span><span style="color:#24292E;">(finishedWork);</span></span>
<span class="line"><span style="color:#24292E;">                }</span></span>
<span class="line"><span style="color:#24292E;">              } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line highlighted"><span style="color:#24292E;">                instance.</span><span style="color:#6F42C1;">componentDidMount</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">              }</span></span>
<span class="line"><span style="color:#24292E;">            } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">              </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">prevProps</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span></span>
<span class="line"><span style="color:#24292E;">                finishedWork.elementType </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> finishedWork.type</span></span>
<span class="line"><span style="color:#24292E;">                  </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> current.memoizedProps</span></span>
<span class="line"><span style="color:#24292E;">                  </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">resolveDefaultProps</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">                      finishedWork.type,</span></span>
<span class="line"><span style="color:#24292E;">                      current.memoizedProps,</span></span>
<span class="line"><span style="color:#24292E;">                    );</span></span>
<span class="line"><span style="color:#24292E;">              </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">prevState</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> current.memoizedState;</span></span>
<span class="line"><span style="color:#24292E;">              </span><span style="color:#6A737D;">// We could update instance props and state here,</span></span>
<span class="line"><span style="color:#24292E;">              </span><span style="color:#6A737D;">// but instead we rely on them being set during last render.</span></span>
<span class="line"><span style="color:#24292E;">              </span><span style="color:#6A737D;">// TODO: revisit this when we implement resuming.</span></span>
<span class="line"></span>
<span class="line highlighted"><span style="color:#24292E;">              </span><span style="color:#6A737D;">// 执行类组件的 componentDidUpdate 生命周期函数</span></span>
<span class="line"><span style="color:#24292E;">              </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span></span>
<span class="line"><span style="color:#24292E;">                enableProfilerTimer </span><span style="color:#D73A49;">&amp;&amp;</span></span>
<span class="line"><span style="color:#24292E;">                enableProfilerCommitHooks </span><span style="color:#D73A49;">&amp;&amp;</span></span>
<span class="line"><span style="color:#24292E;">                finishedWork.mode </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> ProfileMode</span></span>
<span class="line"><span style="color:#24292E;">              ) {</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">                  </span><span style="color:#6F42C1;">startLayoutEffectTimer</span><span style="color:#24292E;">();</span></span>
<span class="line highlighted"><span style="color:#24292E;">                  instance.</span><span style="color:#6F42C1;">componentDidUpdate</span><span style="color:#24292E;">(</span></span>
<span class="line highlighted"><span style="color:#24292E;">                    prevProps,</span></span>
<span class="line highlighted"><span style="color:#24292E;">                    prevState,</span></span>
<span class="line highlighted"><span style="color:#24292E;">                    instance.__reactInternalSnapshotBeforeUpdate,</span></span>
<span class="line highlighted"><span style="color:#24292E;">                  );</span></span>
<span class="line"><span style="color:#24292E;">                } </span><span style="color:#D73A49;">finally</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">                  </span><span style="color:#6F42C1;">recordLayoutEffectDuration</span><span style="color:#24292E;">(finishedWork);</span></span>
<span class="line"><span style="color:#24292E;">                }</span></span>
<span class="line"><span style="color:#24292E;">              } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line highlighted"><span style="color:#24292E;">                instance.</span><span style="color:#6F42C1;">componentDidUpdate</span><span style="color:#24292E;">(</span></span>
<span class="line highlighted"><span style="color:#24292E;">                  prevProps,</span></span>
<span class="line highlighted"><span style="color:#24292E;">                  prevState,</span></span>
<span class="line highlighted"><span style="color:#24292E;">                  instance.__reactInternalSnapshotBeforeUpdate,</span></span>
<span class="line highlighted"><span style="color:#24292E;">                );</span></span>
<span class="line"><span style="color:#24292E;">              }</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">          }</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// TODO: I think this is now always non-null by the time it reaches the</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// commit phase. Consider removing the type check.</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">updateQueue</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">UpdateQueue</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (finishedWork.updateQueue: any);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (updateQueue </span><span style="color:#D73A49;">!==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#6A737D;">// We could update instance props and state here,</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#6A737D;">// but instead we rely on them being set during last render.</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#6A737D;">// TODO: revisit this when we implement resuming.</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#6F42C1;">commitUpdateQueue</span><span style="color:#24292E;">(finishedWork, updateQueue, instance);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">break</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> HostRoot: {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// TODO: I think this is now always non-null by the time it reaches the</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// commit phase. Consider removing the type check.</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">updateQueue</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">UpdateQueue</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (finishedWork.updateQueue: any);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (updateQueue </span><span style="color:#D73A49;">!==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> instance </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (finishedWork.child </span><span style="color:#D73A49;">!==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">switch</span><span style="color:#24292E;"> (finishedWork.child.tag) {</span></span>
<span class="line"><span style="color:#24292E;">              </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> HostComponent:</span></span>
<span class="line"><span style="color:#24292E;">                instance </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getPublicInstance</span><span style="color:#24292E;">(finishedWork.child.stateNode);</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">break</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">              </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> ClassComponent:</span></span>
<span class="line"><span style="color:#24292E;">                instance </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> finishedWork.child.stateNode;</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">break</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">          }</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#6F42C1;">commitUpdateQueue</span><span style="color:#24292E;">(finishedWork, updateQueue, instance);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">break</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> HostComponent: {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">instance</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Instance</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> finishedWork.stateNode;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// Renderers may schedule work to be done after host components are mounted</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// (eg DOM renderer may schedule auto-focus for inputs and form controls).</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// These effects should only be committed when components are first mounted,</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// aka when there is no current/alternate.</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (current </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> finishedWork.flags </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> Update) {</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">type</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> finishedWork.type;</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">props</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> finishedWork.memoizedProps;</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#6A737D;">// 处理表单元素的 autoFocus 属性</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#6F42C1;">commitMount</span><span style="color:#24292E;">(instance, type, props, finishedWork);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">break</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> HostText: {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// We have no life-cycles associated with text.</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">break</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> HostPortal: {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// We have no life-cycles associated with portals.</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">break</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// ... 省略以下 case 的处理逻辑</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> Profiler:</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> SuspenseComponent:</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> SuspenseListComponent:</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> IncompleteClassComponent:</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> ScopeComponent:</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> OffscreenComponent:</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> LegacyHiddenComponent:</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> TracingMarkerComponent: {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">break</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">default</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Error</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#032F62;">&#39;This unit of work tag should not have side-effects. This error is &#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#032F62;">&#39;likely caused by a bug in React. Please file an issue.&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        );</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 处理 Ref 副作用</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">enableSuspenseLayoutEffectSemantics </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">!</span><span style="color:#24292E;">offscreenSubtreeWasHidden) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (enableScopeAPI) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// TODO: This is a temporary solution that allowed us to transition away</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// from React Flare on www.</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (finishedWork.flags </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> Ref </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> finishedWork.tag </span><span style="color:#D73A49;">!==</span><span style="color:#24292E;"> ScopeComponent) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">commitAttachRef</span><span style="color:#24292E;">(finishedWork);</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (finishedWork.flags </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> Ref) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">commitAttachRef</span><span style="color:#24292E;">(finishedWork);</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br><span class="line-number">82</span><br><span class="line-number">83</span><br><span class="line-number">84</span><br><span class="line-number">85</span><br><span class="line-number">86</span><br><span class="line-number">87</span><br><span class="line-number">88</span><br><span class="line-number">89</span><br><span class="line-number">90</span><br><span class="line-number">91</span><br><span class="line-number">92</span><br><span class="line-number">93</span><br><span class="line-number">94</span><br><span class="line-number">95</span><br><span class="line-number">96</span><br><span class="line-number">97</span><br><span class="line-number">98</span><br><span class="line-number">99</span><br><span class="line-number">100</span><br><span class="line-number">101</span><br><span class="line-number">102</span><br><span class="line-number">103</span><br><span class="line-number">104</span><br><span class="line-number">105</span><br><span class="line-number">106</span><br><span class="line-number">107</span><br><span class="line-number">108</span><br><span class="line-number">109</span><br><span class="line-number">110</span><br><span class="line-number">111</span><br><span class="line-number">112</span><br><span class="line-number">113</span><br><span class="line-number">114</span><br><span class="line-number">115</span><br><span class="line-number">116</span><br><span class="line-number">117</span><br><span class="line-number">118</span><br><span class="line-number">119</span><br><span class="line-number">120</span><br><span class="line-number">121</span><br><span class="line-number">122</span><br><span class="line-number">123</span><br><span class="line-number">124</span><br><span class="line-number">125</span><br><span class="line-number">126</span><br><span class="line-number">127</span><br><span class="line-number">128</span><br><span class="line-number">129</span><br><span class="line-number">130</span><br><span class="line-number">131</span><br><span class="line-number">132</span><br><span class="line-number">133</span><br><span class="line-number">134</span><br><span class="line-number">135</span><br><span class="line-number">136</span><br><span class="line-number">137</span><br><span class="line-number">138</span><br><span class="line-number">139</span><br><span class="line-number">140</span><br><span class="line-number">141</span><br><span class="line-number">142</span><br><span class="line-number">143</span><br><span class="line-number">144</span><br><span class="line-number">145</span><br><span class="line-number">146</span><br><span class="line-number">147</span><br><span class="line-number">148</span><br><span class="line-number">149</span><br><span class="line-number">150</span><br><span class="line-number">151</span><br><span class="line-number">152</span><br><span class="line-number">153</span><br><span class="line-number">154</span><br><span class="line-number">155</span><br><span class="line-number">156</span><br><span class="line-number">157</span><br><span class="line-number">158</span><br><span class="line-number">159</span><br><span class="line-number">160</span><br><span class="line-number">161</span><br><span class="line-number">162</span><br><span class="line-number">163</span><br><span class="line-number">164</span><br><span class="line-number">165</span><br><span class="line-number">166</span><br><span class="line-number">167</span><br><span class="line-number">168</span><br><span class="line-number">169</span><br><span class="line-number">170</span><br><span class="line-number">171</span><br><span class="line-number">172</span><br><span class="line-number">173</span><br><span class="line-number">174</span><br><span class="line-number">175</span><br><span class="line-number">176</span><br><span class="line-number">177</span><br><span class="line-number">178</span><br><span class="line-number">179</span><br><span class="line-number">180</span><br><span class="line-number">181</span><br><span class="line-number">182</span><br><span class="line-number">183</span><br><span class="line-number">184</span><br><span class="line-number">185</span><br><span class="line-number">186</span><br><span class="line-number">187</span><br><span class="line-number">188</span><br><span class="line-number">189</span><br><span class="line-number">190</span><br><span class="line-number">191</span><br><span class="line-number">192</span><br><span class="line-number">193</span><br><span class="line-number">194</span><br></div></div><h3 id="commitattachref" tabindex="-1"><code>commitAttachRef</code> <a class="header-anchor" href="#commitattachref" aria-label="Permalink to &quot;\`commitAttachRef\`&quot;">​</a></h3><p><code>commitAttachRef</code> 函数用于获取 DOM 实例，更新 <code>ref</code></p><blockquote><p>源码地址 <a href="https://github.com/maomao1996/code-analysis/blob/c0b1b3529c628ba6b2b81bdbc6d212f666b2f20f/react-v18.2.0/src/react/packages/react-reconciler/src/ReactFiberCommitWork.old.js#L1232" target="_blank" rel="noreferrer">commitAttachRef() | react-reconciler/src/ReactFiberCommitWork.old.js</a></p></blockquote><div class="language-ts vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">commitAttachRef</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">finishedWork</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Fiber</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">ref</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> finishedWork.ref</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (ref </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">instance</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> finishedWork.stateNode</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 获取 DOM 实例</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> instanceToUse</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">switch</span><span style="color:#E1E4E8;"> (finishedWork.tag) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> HostComponent:</span></span>
<span class="line"><span style="color:#E1E4E8;">        instanceToUse </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getPublicInstance</span><span style="color:#E1E4E8;">(instance)</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">break</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">        instanceToUse </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> instance</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// Moved outside to ensure DCE works with this flag</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (enableScopeAPI </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> finishedWork.tag </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> ScopeComponent) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      instanceToUse </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> instance</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">typeof</span><span style="color:#E1E4E8;"> ref </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;function&#39;</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// 如果 ref 是函数，调用回调函数并传入 DOM 实例</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> retVal</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (enableProfilerTimer </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> enableProfilerCommitHooks </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> finishedWork.mode </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> ProfileMode) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#B392F0;">startLayoutEffectTimer</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">          retVal </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ref</span><span style="color:#E1E4E8;">(instanceToUse)</span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span><span style="color:#F97583;">finally</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#B392F0;">recordLayoutEffectDuration</span><span style="color:#E1E4E8;">(finishedWork)</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">      } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        retVal </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ref</span><span style="color:#E1E4E8;">(instanceToUse)</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// 如果 ref 是 ref 实例形式，则将值赋给 current 属性</span></span>
<span class="line"><span style="color:#E1E4E8;">      ref.current </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> instanceToUse</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">commitAttachRef</span><span style="color:#24292E;">(</span><span style="color:#E36209;">finishedWork</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Fiber</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">ref</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> finishedWork.ref</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (ref </span><span style="color:#D73A49;">!==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">instance</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> finishedWork.stateNode</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 获取 DOM 实例</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> instanceToUse</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">switch</span><span style="color:#24292E;"> (finishedWork.tag) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> HostComponent:</span></span>
<span class="line"><span style="color:#24292E;">        instanceToUse </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getPublicInstance</span><span style="color:#24292E;">(instance)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">break</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">default</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">        instanceToUse </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> instance</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// Moved outside to ensure DCE works with this flag</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (enableScopeAPI </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> finishedWork.tag </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> ScopeComponent) {</span></span>
<span class="line"><span style="color:#24292E;">      instanceToUse </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> instance</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">typeof</span><span style="color:#24292E;"> ref </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;function&#39;</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// 如果 ref 是函数，调用回调函数并传入 DOM 实例</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> retVal</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (enableProfilerTimer </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> enableProfilerCommitHooks </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> finishedWork.mode </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> ProfileMode) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#6F42C1;">startLayoutEffectTimer</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">          retVal </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ref</span><span style="color:#24292E;">(instanceToUse)</span></span>
<span class="line"><span style="color:#24292E;">        } </span><span style="color:#D73A49;">finally</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#6F42C1;">recordLayoutEffectDuration</span><span style="color:#24292E;">(finishedWork)</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">      } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        retVal </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ref</span><span style="color:#24292E;">(instanceToUse)</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// 如果 ref 是 ref 实例形式，则将值赋给 current 属性</span></span>
<span class="line"><span style="color:#24292E;">      ref.current </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> instanceToUse</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br></div></div>`,21),o=[e];function c(r,t,E,i,y,b){return n(),a("div",null,o)}const d=s(p,[["render",c]]);export{u as __pageData,d as default};
