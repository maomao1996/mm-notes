import{_ as e,h as s,o as i,aa as a}from"./chunks/framework.C-tu2utv.js";const g=JSON.parse('{"title":"三斜线指令","description":"","frontmatter":{},"headers":[],"relativePath":"fe/typescript/triple-slash-directives.md","filePath":"fe/typescript/triple-slash-directives.md","lastUpdated":1723808122000}'),t={name:"fe/typescript/triple-slash-directives.md"},l=a('<h1 id="三斜线指令" tabindex="-1">三斜线指令 <a class="header-anchor" href="#三斜线指令" aria-label="Permalink to &quot;三斜线指令&quot;">​</a></h1><p><code>/// &lt;reference&gt;</code> 语法是一种特殊的 TypeScript 注释，用于在编译期间显式地引入其他文件中的类型信息，确保项目中的类型信息得到正确的引用和使用</p><ul><li>这种注释通常出现在文件的顶部，用于声明文件之间的依赖关系</li><li>如果出现在一个语句或声明之后，那么其会被当做普通的单行注释，不再具有特殊含义</li></ul><div class="tip custom-block"><p class="custom-block-title">主要用途</p><ol><li><strong>引入类型声明文件</strong>：常用于引入外部 <code>.d.ts</code> 类型声明文件，以便在当前工程中使用这些类型声明</li><li><strong>声明文件之间的依赖</strong>：在大型项目中，如果类型声明文件有依赖关系，<code>/// &lt;reference&gt;</code> 可以确保依赖文件先被加载</li><li><strong>引用库文件</strong>：可以声明对某个包的依赖（比如 <code>node</code> 库，这样 TypeScript 编译器会自动加载对应的类型声明文件）</li></ol></div><h2 id="语法说明" tabindex="-1">语法说明 <a class="header-anchor" href="#语法说明" aria-label="Permalink to &quot;语法说明&quot;">​</a></h2><h3 id="reference-path" tabindex="-1"><code>/// &lt;reference path=&quot;...&quot; /&gt;</code> <a class="header-anchor" href="#reference-path" aria-label="Permalink to &quot;`/// &lt;reference path=&quot;...&quot; /&gt;`&quot;">​</a></h3><p>引用一个本地的 TypeScript 类型声明文件 (<code>.d.ts</code> 文件)（其可以是相对路径或绝对路径）</p><div class="language-ts vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 相对路径</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/// &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">reference</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> path</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./types/index.d.ts&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> /&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 绝对路径</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/// &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">reference</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> path</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;D:/project/types/index.d.ts&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> /&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="reference-types" tabindex="-1"><code>/// &lt;reference types=&quot;...&quot; /&gt;</code> <a class="header-anchor" href="#reference-types" aria-label="Permalink to &quot;`/// &lt;reference types=&quot;...&quot; /&gt;`&quot;">​</a></h3><p>用于引入 <code>@types</code> 包中的类型声明文件</p><div class="language-ts vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/// &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">reference</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> types</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;node&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> /&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="reference-lib" tabindex="-1"><code>/// &lt;reference lib=&quot;...&quot; /&gt;</code> <a class="header-anchor" href="#reference-lib" aria-label="Permalink to &quot;`/// &lt;reference lib=&quot;...&quot; /&gt;`&quot;">​</a></h3><p>引用 TypeScript 提供的内置的 <code>lib</code> 类型声明文件，如 <code>es2015</code>、<code>dom</code>等</p><div class="language-ts vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/// &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">reference</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> lib</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;es2015&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> /&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="reference-no-default-lib-true" tabindex="-1"><code>/// &lt;reference no-default-lib=&quot;true&quot;/&gt;</code> <a class="header-anchor" href="#reference-no-default-lib-true" aria-label="Permalink to &quot;`/// &lt;reference no-default-lib=&quot;true&quot;/&gt;`&quot;">​</a></h3><p>告诉 TypeScript 编译器不要自动引入 <code>lib.d.ts</code> 文件</p><div class="language-ts vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/// &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">reference</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> no-default-lib</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;true&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> /&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="编译选项" tabindex="-1">编译选项 <a class="header-anchor" href="#编译选项" aria-label="Permalink to &quot;编译选项&quot;">​</a></h2><p>当使用 <code>/// &lt;reference&gt;</code> 时，需要确保 TypeScript 编译器知道如何处理这些指令。可以通过以下编译选项来配置：</p><ul><li><code>--noResolve</code>：禁用自动解析模块，编译器不会自动解析 <code>/// &lt;reference&gt;</code> 中的文件</li><li><code>--noLib</code>：禁用所有默认标准库文件，需要手动指定 <code>/// &lt;reference&gt;</code></li></ul><div class="language-ts vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 在 TypeScript 文件顶部手动引入 ES2015 标准库</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/// &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">reference</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> lib</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;es2015&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> /&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="其他说明" tabindex="-1">其他说明 <a class="header-anchor" href="#其他说明" aria-label="Permalink to &quot;其他说明&quot;">​</a></h2><div class="tip custom-block"><p class="custom-block-title">使用场景</p><ul><li><strong>使用模块系统</strong>：如果项目使用 ES6 模块或 CommonJS，通常不需要使用 <code>/// &lt;reference&gt;</code>，而是通过 <code>import</code> 引入模块</li><li><strong>优先使用 <code>tsconfig.json</code> 配置</strong>：大多数项目应使用 <code>tsconfig.json</code> 来管理类型文件的引用，这样更简洁和可维护</li><li><strong>使用场景</strong>：如果在没有模块系统的环境中开发，或者需要处理全局变量、全局类型时，<code>/// &lt;reference&gt;</code> 会派上用场</li></ul></div><div class="warning custom-block"><p class="custom-block-title">注意事项</p><ul><li><code>/// &lt;reference&gt;</code> 必须出现在文件的顶部，且不能包含其他代码或注释</li><li>路径必须有效且正确，否则 TypeScript 编译器无法找到并加载引用的文件</li></ul></div>',24),n=[l];function r(p,o,d,c,h,k){return i(),s("div",null,n)}const b=e(t,[["render",r]]);export{g as __pageData,b as default};
