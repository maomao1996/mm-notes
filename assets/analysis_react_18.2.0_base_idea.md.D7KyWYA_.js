import{_ as e,h as a,o as s,a9 as i}from"./chunks/framework.DFTF_j0L.js";const r="/mm-notes/assets/update-process.Bx3miRCx.png",g=JSON.parse('{"title":"React 设计理念与架构","description":"茂茂的 React v18.2.0 源码阅读笔记 —— React 设计理念与架构","frontmatter":{"description":"茂茂的 React v18.2.0 源码阅读笔记 —— React 设计理念与架构"},"headers":[],"relativePath":"analysis/react/18.2.0/base/idea.md","filePath":"analysis/react/18.2.0/base/idea.md","lastUpdated":1702987116000}'),t={name:"analysis/react/18.2.0/base/idea.md"},l=i(`<h1 id="react-设计理念与架构" tabindex="-1">React 设计理念与架构 <a class="header-anchor" href="#react-设计理念与架构" aria-label="Permalink to &quot;React 设计理念与架构&quot;">​</a></h1><h2 id="单线程的-javascript-与多线程的浏览器" tabindex="-1">单线程的 JavaScript 与多线程的浏览器 <a class="header-anchor" href="#单线程的-javascript-与多线程的浏览器" aria-label="Permalink to &quot;单线程的 JavaScript 与多线程的浏览器&quot;">​</a></h2><blockquote><p>经典名言：<strong>JavaScript 是单线程的，浏览器是多线程的</strong></p></blockquote><p>多线程的浏览器除了要处理 JavaScript 线程以外，还需要处理包括事件系统、定时器/延时器、网络请求、<strong>处理 DOM 的 UI 渲染线程</strong>等各种各样的任务线程，而 <strong>JavaScript 线程是可以操作 DOM 的</strong>，这就决定了 <strong>JavaScript 线程和渲染线程必须是互斥的</strong></p><div class="tip custom-block"><p class="custom-block-title">为什么 JavaScript 线程和渲染线程必须是互斥的</p><p>当渲染线程和 JavaScript 线程同时工作时，其渲染结果是难以预测的：比如渲染线程刚绘制好的一张图片，JavaScript 线程可能会将其删除，或者渲染线程刚绘制好的一段文字，JavaScript 线程可能会将其修改为其他文字，这样页面可能会渲染混乱、样式错乱、甚至导致页面崩溃</p></div><p>当下主流浏览器刷新频率为 60Hz，即每 <code>16.6ms</code> （<code>1000ms / 60Hz</code>）浏览器会刷新一次。在这 <code>16.6ms</code> 内需要执行 JavaScript 脚本、样式布局、样式绘制等；同时在这个互斥机制下，如果 JavaScript 线程长时间地占用了主线程，就会导致<strong>渲染层面的更新就不得不长时间地等待，界面长时间不更新，带给用户的体验就是所谓的“卡顿”</strong></p><h2 id="react-15-的架构" tabindex="-1">React 15 的架构 <a class="header-anchor" href="#react-15-的架构" aria-label="Permalink to &quot;React 15 的架构&quot;">​</a></h2><p>React 15 架构可以分为两层：</p><ul><li><strong>Reconciler（协调器）</strong>：<strong>负责找出变化的组件</strong>（每当有更新发生时 Reconciler 会做如下工作） <ol><li>调用函数组件、或 <code>class</code> 组件的 <code>render</code> 方法，将返回的 JSX 转化为虚拟 DOM</li><li>将虚拟 DOM 和上次更新时的虚拟 DOM 对比</li><li>通过对比找出本次更新中变化的虚拟 DOM</li><li>通知 Renderer 将变化的虚拟 DOM 渲染到页面上</li></ol></li><li><strong>Renderer（渲染器）</strong>：<strong>负责将变化的组件渲染到页面上</strong>（接到 Reconciler 通知后将变化的组件渲染到页面上）</li></ul><p>在 React 15 以及更早的版本中使用的是 <a href="https://github.com/facebook/react/tree/15-stable/src/renderers/shared/stack/reconciler" target="_blank" rel="noreferrer">Stack Reconciler</a>，其具有固有的局限性：<strong>同步并且无法中断工作或将其拆分为块</strong></p><p>由于 <strong>Stack Reconciler 是一个同步的递归过程</strong>，导致其不可被打断，当处理结构相对复杂、体量相对庞大的虚拟 DOM 树时，<strong>Stack Reconciler 需要的调和时间就会变长，这就意味着 JavaScript 线程将长时间地霸占主线程，从而导致上文所描述的渲染卡顿/卡死、交互长时间无响应等问题</strong></p><h2 id="异步可中断" tabindex="-1">异步可中断 <a class="header-anchor" href="#异步可中断" aria-label="Permalink to &quot;异步可中断&quot;">​</a></h2><p>在日常的开发中，如果遇到比较耗时的代码计算会怎么办呢，首先我们可能会将任务分割，让它能够被中断，在其他任务到来的时候让出执行权，当其他任务执行后，再从之前中断的部分开始异步执行剩下的计算。所以关键是实现一套<strong>异步可中断</strong>的方案</p><p>由此得知，在 React 的实现中有这三个重要概念</p><ul><li>任务分割</li><li>异步执行</li><li>让出执行权</li></ul><ol><li><strong>Fiber</strong>：React 15 的更新是同步的，因为它不能将任务分割，所以需要一套数据结构让它既能对应真实的 DOM 又能作为分隔的单元，这就是 Fiber</li><li><strong>Scheduler</strong>：有了 Fiber 后，我们需要一个时间片异步执行这些 Fiber 的工作单元，而 React 实现的时间片运行机制就叫做 Scheduler</li><li><strong>Lane</strong>：有了异步调度后，我们还需要细粒度的管理各个任务的优先级，让高优先级的任务优先执行，各个 Fiber 工作单元还能比较优先级，相同优先级的任务可以一起更新</li></ol><h2 id="代数效应" tabindex="-1">代数效应 <a class="header-anchor" href="#代数效应" aria-label="Permalink to &quot;代数效应&quot;">​</a></h2><p>代数效应是函数式编程中的一个概念，用于<strong>将副作用从函数调用中分离</strong>出来，使得函数调用只关注输入和输出，而不关注函数内部的具体实现。在 React 中，代数效应的应用最明显的例子就是 <code>Hooks</code></p><div class="tip custom-block"><p class="custom-block-title">详细资料</p><p><a href="https://react.iamkasong.com/process/fiber-mental.html" target="_blank" rel="noreferrer">什么是代数效应 | React 技术揭秘</a></p></div><h2 id="react-16-之后的架构" tabindex="-1">React 16 之后的架构 <a class="header-anchor" href="#react-16-之后的架构" aria-label="Permalink to &quot;React 16 之后的架构&quot;">​</a></h2><blockquote><p>为了解决上面的问题，React 从 <code>v15</code> 升级到 <code>v16</code> 后重构了整个架构，引入了 Fiber Reconciler</p></blockquote><p>React 16 架构可以分为三层：</p><ul><li>Scheduler（调度器）：调度任务的优先级（高优任务优先进入 <strong>Reconciler</strong>）</li><li>Reconciler（协调器）：负责找出变化的组件</li><li>Renderer（渲染器）：负责将变化的组件渲染到页面上</li></ul><p>在新的架构中，React 新增了 <strong>Scheduler（调度器）</strong></p><h3 id="scheduler-调度器" tabindex="-1">Scheduler（调度器） <a class="header-anchor" href="#scheduler-调度器" aria-label="Permalink to &quot;Scheduler（调度器）&quot;">​</a></h3><p>浏览器本身提供了一个 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window/requestIdleCallback" target="_blank" rel="noreferrer">requestIdleCallback</a> API，但由于以下因素 React 放弃使用：</p><ul><li>浏览器兼容性</li><li>触发频率不稳定（如当我们的浏览器切换 tab 后，之前 tab 注册的 <code>requestIdleCallback</code> 触发频率会变低）</li></ul><p>基于以上原因，React 实现了功能更完备的 <code>requestIdleCallback</code> polyfill，这就是 Scheduler。除了在空闲时触发回调的功能外，Scheduler 还提供了多种调度优先级供任务设置</p><blockquote><p><a href="https://github.com/facebook/react/blob/493f72b0a7111b601c16b8ad8bc2649d82c184a0/packages/scheduler/README.md" target="_blank" rel="noreferrer">Scheduler</a> 是独立于 React 的库</p></blockquote><h3 id="reconciler-协调器" tabindex="-1">Reconciler（协调器） <a class="header-anchor" href="#reconciler-协调器" aria-label="Permalink to &quot;Reconciler（协调器）&quot;">​</a></h3><p>在 React15 中 Reconciler 是递归处理虚拟 DOM；而在 React 16 则将递归变成了可以中断的循环过程</p><p>每次循环都会调用 <code>shouldYield</code> 判断当前是否有剩余时间。如果没有剩余时间，就会退出循环，将控制权交还给浏览器；如果有剩余时间，就会继续循环，继续调用 <code>performUnitOfWork</code></p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> workLoopConcurrent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // Perform work until Scheduler asks us to yield</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  while</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (workInProgress </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &amp;&amp;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> !</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">shouldYield</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    performUnitOfWork</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(workInProgress)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><blockquote><p>源码地址 <a href="https://github.com/maomao1996/code-analysis/blob/c0b1b3529c628ba6b2b81bdbc6d212f666b2f20f/react-v18.2.0/src/react/packages/react-reconciler/src/ReactFiberWorkLoop.old.js#L1824" target="_blank" rel="noreferrer">workLoopConcurrent | ReactFiberWorkLoop.old.js</a></p></blockquote><p>在 React16 中，Reconciler 与 Renderer 不再是交替工作。当 Scheduler 将任务交给 Reconciler 后，Reconciler 会为变化的虚拟 DOM 打上代表增/删/更新的标记，类似这样：</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Placement</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> /*                    */</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0b00000000000000000000000010</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Update</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> /*                       */</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0b00000000000000000000000100</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Deletion</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> /*                     */</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0b00000000000000000000001000</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>同时整个 Scheduler 与 Reconciler 的工作都在内存中进行。只有当所有组件都完成 Reconciler 的工作，才会统一交给 Renderer，这样就保证了整个过程不会出现中断导致页面渲染不完全的情况</p><h3 id="renderer-渲染器" tabindex="-1">Renderer（渲染器） <a class="header-anchor" href="#renderer-渲染器" aria-label="Permalink to &quot;Renderer（渲染器）&quot;">​</a></h3><p>Renderer 根据 Reconciler 为 Fiber 节点打的标记，同步执行对应的 DOM 操作</p><blockquote><p>在 React 16 架构中的更新流程</p></blockquote><p><img src="`+r+'" alt="update-process"></p><p>红框中的步骤随时可能由于以下原因被中断：</p><ul><li>有其他更高优任务需要先更新</li><li>当前帧没有剩余时间</li></ul><p>由于红框中的工作都在内存中进行，不会更新页面上的 DOM，所以即使反复中断用户也不会看见更新不完全的 DOM</p><hr><div class="tip custom-block"><p class="custom-block-title">相关资料</p><ul><li><a href="https://react.iamkasong.com/preparation/idea.html" target="_blank" rel="noreferrer">React 理念 | React 技术揭秘</a></li><li><a href="https://react.iamkasong.com/process/fiber-mental.html" target="_blank" rel="noreferrer">Fiber 架构的心智模型 | React 技术揭秘</a></li><li><a href="https://xiaochen1024.com/courseware/60b1b2f6cf10a4003b634718/60b1b31ccf10a4003b63471a" target="_blank" rel="noreferrer">React 的设计理念 | React 源码解析</a></li></ul></div>',46),n=[l];function c(o,p,h,d,k,b){return s(),a("div",null,n)}const m=e(t,[["render",c]]);export{g as __pageData,m as default};
