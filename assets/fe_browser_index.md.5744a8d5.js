import{_ as s,o as a,g as n,Q as l}from"./chunks/framework.308e1374.js";const o="/notes/assets/chrome-framework.5e7e4a3d.png",e="/notes/assets/cors-process.b6bf2379.png",m=JSON.parse('{"title":"浏览器知识","description":"","frontmatter":{},"headers":[],"relativePath":"fe/browser/index.md","filePath":"fe/browser/index.md","lastUpdated":1694692551000}'),p={name:"fe/browser/index.md"},c=l('<h1 id="浏览器知识" tabindex="-1">浏览器知识 <a class="header-anchor" href="#浏览器知识" aria-label="Permalink to &quot;浏览器知识&quot;">​</a></h1><h2 id="基础知识" tabindex="-1">基础知识 <a class="header-anchor" href="#基础知识" aria-label="Permalink to &quot;基础知识&quot;">​</a></h2><h3 id="线程和进程" tabindex="-1">线程和进程 <a class="header-anchor" href="#线程和进程" aria-label="Permalink to &quot;线程和进程&quot;">​</a></h3><blockquote><p>进程（process）和线程（thread）是操作系统的基本概念</p></blockquote><p>进程是 CPU 资源分配的最小单位（是能拥有资源和独立运行的最小单位）<br> 线程是 CPU 调度的最小单位（是建立在进程基础上的一次程序运行单位）<br></p><p><strong>一个进程就是一个程序的运行实例</strong>：启动一个程序时，操作系统会为该程序创建一块内存，用来存放代码、运行中的数据和一个执行任务的主线程，我们把这样的一个运行环境叫<strong>进程</strong></p><p><strong>线程是进程内的一个执行单元</strong>：线程是不能单独存在的，是依附于进程并由进程来启动和管理的</p><div class="tip custom-block"><p class="custom-block-title">进程和线程的关系特点</p><ul><li>进程是拥有资源的基本单位；线程是调度和分配的基本单位（是进程内的一个执行单元，也是进程内的可调度实体）</li><li>进程之间相互隔离，互不干扰</li><li>一个进程中可以并发执行多个线程</li><li>一个线程只能隶属于一个进程，而一个进程是可以拥有多个线程的（但至少有一个主线程）</li><li>同一进程的所有线程共享该进程的所有数据</li><li>进程中的任意一线程执行出错，都会导致整个进程的崩溃</li><li>当一个进程关闭之后，操作系统会回收进程所占用的内存</li></ul></div><h3 id="chrome-打开一个页面会有几个进程" tabindex="-1">Chrome 打开一个页面会有几个进程？ <a class="header-anchor" href="#chrome-打开一个页面会有几个进程" aria-label="Permalink to &quot;Chrome 打开一个页面会有几个进程？&quot;">​</a></h3><blockquote><p>最新的 Chrome 多进程架构图</p></blockquote><p><img src="'+o+'" alt="Chrome 多进程架构图"></p><ul><li><strong>浏览器主进程</strong>：负责界面显示、用户交互、子进程管理，同时提供存储等功能</li><li><strong>渲染进程</strong>：负责将 <code>HTML</code> <code>CSS</code> 和 <code>JavaScript</code> 转换为用户可以与之交互的网页 <ul><li>排版引擎 Blink 和 JavaScript 引擎 V8 都是运行在该进程中</li><li>默认情况下 Chrome 会为每个 Tab 标签创建一个渲染进程</li><li>出于安全考虑渲染进程都是运行在沙箱模式下</li></ul></li><li><strong>GPU 进程</strong>：负责网页、Chrome 的 UI 界面的绘制</li><li><strong>网络进程</strong>：负责页面的网络资源加载（之前是作为一个模块运行在浏览器进程）</li><li><strong>插件进程</strong>：负责插件的运行（因为插件易崩溃所以需要通过插件进程来隔离，以保证插件崩溃不会对浏览器和页面造成影响）</li></ul><p><a href="https://time.geekbang.org/column/article/113513" target="_blank" rel="noreferrer">Chrome 架构：仅仅打开了 1 个页面，为什么有 4 个进程？—— 浏览器工作原理与实践</a></p><h2 id="跨域" tabindex="-1">跨域 <a class="header-anchor" href="#跨域" aria-label="Permalink to &quot;跨域&quot;">​</a></h2><div class="tip custom-block"><p class="custom-block-title">跨域的原因 —— 浏览器的同源策略</p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/Security/Same-origin_policy" target="_blank" rel="noreferrer">同源策略</a>是浏览器一个重要的安全策略，它用于限制一个 <code>origin</code> 的文档或者它加载的脚本如何能与另一个源的资源进行交互。它能帮助阻隔恶意文档，减少可能被攻击的媒介</p><p>同源的定义是两个 <code>URL</code> 的 <strong>协议</strong>、<strong>域名</strong>(子域名 + 主域名)、<strong>端口号</strong> 都相同，否则就会出现跨域</p></div><div class="tip custom-block"><p class="custom-block-title">同源策略的限制范围</p><ol><li>限制跨源网络访问: <code>AJAX</code> 请求不能发送</li><li>限制跨源脚本 <code>API</code> 访问: <code>DOM</code> 无法获得</li><li>限制跨源数据存储访问: <code>Cookie</code> <code>LocalStorage</code> 和 <code>IndexDB</code> 无法读取</li></ol><p>一般常说的跨域指网络跨域</p></div><h3 id="常用的跨域解决方案" tabindex="-1">常用的跨域解决方案 <a class="header-anchor" href="#常用的跨域解决方案" aria-label="Permalink to &quot;常用的跨域解决方案&quot;">​</a></h3><div class="tip custom-block"><p class="custom-block-title">常用的跨域解决方案</p><ol><li><strong>CORS</strong></li><li><strong>JSONP</strong></li><li>Nginx 反向代理</li><li>WebSocket</li><li>postMessage</li><li>document.domain</li></ol></div><h3 id="cors-跨源资源共享" tabindex="-1">CORS 跨源资源共享 <a class="header-anchor" href="#cors-跨源资源共享" aria-label="Permalink to &quot;CORS 跨源资源共享&quot;">​</a></h3><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/CORS" target="_blank" rel="noreferrer">CORS (跨源资源共享)</a> 是 <a href="https://developer.mozilla.org/zh-CN/docs/Glossary/HTTP" target="_blank" rel="noreferrer">HTTP</a> 的一部分，它允许浏览器向跨源服务器发出 <code>XMLHttpRequest</code> 请求，从而解决了 <code>AJAX</code> 只能同源使用的限制。</p><blockquote><p><code>CORS</code> 需要浏览器和服务器同时支持，目前所有浏览器均已支持，只需服务器配置即可使用</p></blockquote><p>浏览器将 <code>CORS</code> 请求分成两类: <strong>简单请求</strong>和<strong>非简单请求</strong></p><h4 id="简单请求" tabindex="-1">简单请求 <a class="header-anchor" href="#简单请求" aria-label="Permalink to &quot;简单请求&quot;">​</a></h4><div class="tip custom-block"><p class="custom-block-title">简单请求必须同时满足以下条件</p><blockquote><p>日常开发只会关注前两点</p></blockquote><ul><li>请求方法是以下三种方法之一 <ul><li><code>HEAD</code></li><li><code>GET</code></li><li><code>POST</code></li></ul></li><li>只使用了如下的安全首部字段，不得人为设置其他首部字段 <ul><li><code>Accept</code></li><li><code>Accept-Language</code></li><li><code>Content-Language</code></li><li><code>Content-Type</code> 仅限以下三种 <ul><li><code>application/x-www-form-urlencoded</code></li><li><code>multipart/form-data</code></li><li><code>text/plain</code></li></ul></li></ul></li><li>请求中的任意 <code>XMLHttpRequestUpload</code> 对象均没有注册任何事件监听器(使用 <code>XMLHttpRequest.upload</code> 属性访问<code>XMLHttpRequestUpload</code> 对象)</li><li>请求中没有使用 <code>ReadableStream</code> 对象</li></ul></div><h5 id="简单请求基本流程" tabindex="-1">简单请求基本流程 <a class="header-anchor" href="#简单请求基本流程" aria-label="Permalink to &quot;简单请求基本流程&quot;">​</a></h5><ol><li>浏览器会直接发出 <code>CORS</code> 请求并在请求头信息之中增加一个 <code>Origin</code> 字段(用来说明本次请求来自哪个源(协议 + 域名 + 端口))</li><li>服务器判断 <code>Origin</code> 字段决定是否同意这次请求 <ol><li>通过请求会在响应头增加 <code>CORS</code> 相关的字段(以<code>Access-Control-</code>开头)</li><li>拒绝请求时不会增加 <code>CORS</code> 相关的字段，浏览器会抛出异常</li></ol></li></ol><div class="tip custom-block"><p class="custom-block-title">简单请求响应头中的 CORS 字段</p><ul><li><code>Access-Control-Allow-Origin</code>: 只能是 <code>*</code>(接受任意域名的请求)或者是请求时 <code>Origin</code> 字段的值</li><li><code>Access-Control-Allow-Credentials</code>(可选): 是一个布尔值,表示是否允许发送 <code>Cookie</code></li><li><code>Access-Control-Expose-Headers</code>(可选): <code>CORS</code> 请求时 <code>XMLHttpRequest</code> 对象的 <code>getResponseHeader()</code> 方法只能拿到 6 个基本字段：<code>Cache-Control、Content-Language、Content-Type、Expires、Last-Modified、Pragma</code>。如果想拿到其他字段就必须在 <code>Access-Control-Expose-Headers</code> 里面指定</li></ul></div><div class="tip custom-block"><p class="custom-block-title">CORS 中的 Cookie 设置</p><p><code>CORS</code> 请求默认不发送 <code>Cookie</code>，如果需要发送需要满足如下条件</p><ul><li>服务器必须设置 <code>Access-Control-Allow-Credentials: true</code></li><li><code>Access-Control-Allow-Origin</code> 字段不能为 <code>*</code></li><li><code>AJAX</code> 请求的配置项需设置 <code>withCredentials = true</code></li></ul></div><h4 id="非简单请求" tabindex="-1">非简单请求 <a class="header-anchor" href="#非简单请求" aria-label="Permalink to &quot;非简单请求&quot;">​</a></h4><p>非简单请求是那种对服务器有特殊要求的请求，如请求方法是 <code>PUT</code> 或 <code>DELETE</code>，或者 <code>Content-Type</code> 字段的类型是 <code>application/json</code>。<br> 非简单请求会在正式通信之前增加一次 <code>HTTP</code> 查询请求，称为<strong>预检请求</strong>，用于获取服务器是否允许该实际请求，同时避免跨域请求对服务器的用户数据产生预期之外的影响</p><div class="tip custom-block"><p class="custom-block-title">预检请求</p><p>预检请求用的请求方法是 <code>OPTIONS</code> 表示这个请求是用来询问的</p><ul><li>在预检请求请求头信息里会包含如下字段 <ul><li><code>Origin</code>: 表示本次请求来自哪个源</li><li><code>Access-Control-Request-Method</code>: 用于列出浏览器的 <code>CORS</code> 请求会用到哪些 <code>HTTP</code> 方法</li><li><code>Access-Control-Request-Headers</code>(可选): 指定浏览器 <code>CORS</code> 请求会额外发送的头信息字段</li></ul></li><li>服务器通过后会在预检请求响应头中设置如下字段 <ul><li><code>Access-Control-Allow-Origin</code></li><li><code>Access-Control-Allow-Credentials</code>(可选)</li><li><code>Access-Control-Allow-Methods</code>: 表示服务器支持的所有跨域请求的方法(为了避免多次预检请求)</li><li><code>Access-Control-Allow-Headers</code>: 表示服务器支持的所有头信息字段，不限于浏览器在预检中请求的字段</li><li><code>Access-Control-Max-Age</code>(可选): 用来指定本次预检请求的有效期单位为秒，在有效期内将不发出另一条预检请求</li></ul></li></ul></div><p>一旦服务器通过了预检请求，以后每次浏览器正常的 <code>CORS</code> 请求，就都跟简单请求一样会有一个 <code>Origin</code> 头信息字段。服务器的回应也都会有一个 <code>Access-Control-Allow-Origin</code> 头信息字段</p><details class="details custom-block"><summary>CORS 请求过程</summary><p><img src="'+e+`" alt="CORS 请求过程"></p></details><hr><div class="tip custom-block"><p class="custom-block-title">相关资料</p><p><a href="http://www.ruanyifeng.com/blog/2016/04/cors.html" target="_blank" rel="noreferrer">跨域资源共享 CORS 详解</a></p></div><h3 id="jsonp" tabindex="-1">JSONP <a class="header-anchor" href="#jsonp" aria-label="Permalink to &quot;JSONP&quot;">​</a></h3><p><code>JSONP</code> 是利用 <code>&lt;script&gt;</code> 标签没有跨域限制的漏洞，当前源可以得到从其他来源动态产生的 <code>JSON</code> 数据</p><p><strong><code>JSONP</code> 请求过程流程</strong></p><ol><li>前端定义一个解析的回调函数</li><li>创建 <code>script</code> 标签，其 <code>src</code> 指向接口地址并拼接好参数和回调函数名</li><li>后端处理数据并将其拼接到前端传入的回调函数中(拼接好的数据必须是一个合法的 <code>JavaScript</code> 脚本 )</li><li>浏览器执行后端返回的 <code>JavaScript</code> 脚本代码(调用定义好的回调函数)并删除刚创建的 <code>script</code> 标签</li></ol><details class="details custom-block"><summary>JSONP 代码实现</summary><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">normalizeParams</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">params</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">params) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> Object.</span><span style="color:#B392F0;">keys</span><span style="color:#E1E4E8;">(params)</span></span>
<span class="line"><span style="color:#E1E4E8;">    .</span><span style="color:#B392F0;">map</span><span style="color:#E1E4E8;">((</span><span style="color:#FFAB70;">key</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">\`\${</span><span style="color:#E1E4E8;">key</span><span style="color:#9ECBFF;">}=\${</span><span style="color:#E1E4E8;">params</span><span style="color:#9ECBFF;">[</span><span style="color:#E1E4E8;">key</span><span style="color:#9ECBFF;">]</span><span style="color:#9ECBFF;">}\`</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    .</span><span style="color:#B392F0;">join</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;&amp;&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">jsonp</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">url</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">params</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Promise</span><span style="color:#E1E4E8;">((</span><span style="color:#FFAB70;">resolve</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">callback</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">\`jsonp_\${</span><span style="color:#E1E4E8;">Date</span><span style="color:#9ECBFF;">.</span><span style="color:#B392F0;">now</span><span style="color:#9ECBFF;">()</span><span style="color:#9ECBFF;">}\`</span></span>
<span class="line"><span style="color:#E1E4E8;">    window[callback] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">data</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">resolve</span><span style="color:#E1E4E8;">(data)</span></span>
<span class="line"><span style="color:#E1E4E8;">      document.body.</span><span style="color:#B392F0;">removeChild</span><span style="color:#E1E4E8;">(scriptEle)</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    params.cb </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> callback</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">scriptEle</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> document.</span><span style="color:#B392F0;">createElement</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;script&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    scriptEle.src </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">\`\${</span><span style="color:#E1E4E8;">url</span><span style="color:#9ECBFF;">}\${</span><span style="color:#E1E4E8;">url</span><span style="color:#9ECBFF;">.</span><span style="color:#B392F0;">includes</span><span style="color:#9ECBFF;">(</span><span style="color:#9ECBFF;">&#39;?&#39;</span><span style="color:#9ECBFF;">) </span><span style="color:#F97583;">?</span><span style="color:#9ECBFF;"> </span><span style="color:#9ECBFF;">&#39;&amp;&#39;</span><span style="color:#9ECBFF;"> </span><span style="color:#F97583;">:</span><span style="color:#9ECBFF;"> </span><span style="color:#9ECBFF;">&#39;?&#39;}\${</span><span style="color:#B392F0;">normalizeParams</span><span style="color:#9ECBFF;">(</span><span style="color:#E1E4E8;">params</span><span style="color:#9ECBFF;">)</span><span style="color:#9ECBFF;">}\`</span></span>
<span class="line"><span style="color:#E1E4E8;">    document.body.</span><span style="color:#B392F0;">appendChild</span><span style="color:#E1E4E8;">(scriptEle)</span></span>
<span class="line"><span style="color:#E1E4E8;">  })</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">jsonp</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;https://www.baidu.com/sugrec&#39;</span><span style="color:#E1E4E8;">, {</span></span>
<span class="line"><span style="color:#E1E4E8;">  prod: </span><span style="color:#9ECBFF;">&#39;pc&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  wd: </span><span style="color:#9ECBFF;">&#39;跨域&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">}).</span><span style="color:#B392F0;">then</span><span style="color:#E1E4E8;">((</span><span style="color:#FFAB70;">res</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(res)</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">normalizeParams</span><span style="color:#24292E;">(</span><span style="color:#E36209;">params</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">params) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;&#39;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> Object.</span><span style="color:#6F42C1;">keys</span><span style="color:#24292E;">(params)</span></span>
<span class="line"><span style="color:#24292E;">    .</span><span style="color:#6F42C1;">map</span><span style="color:#24292E;">((</span><span style="color:#E36209;">key</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">\`\${</span><span style="color:#24292E;">key</span><span style="color:#032F62;">}=\${</span><span style="color:#24292E;">params</span><span style="color:#032F62;">[</span><span style="color:#24292E;">key</span><span style="color:#032F62;">]</span><span style="color:#032F62;">}\`</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    .</span><span style="color:#6F42C1;">join</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;&amp;&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">jsonp</span><span style="color:#24292E;">(</span><span style="color:#E36209;">url</span><span style="color:#24292E;">, </span><span style="color:#E36209;">params</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Promise</span><span style="color:#24292E;">((</span><span style="color:#E36209;">resolve</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">callback</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">\`jsonp_\${</span><span style="color:#24292E;">Date</span><span style="color:#032F62;">.</span><span style="color:#6F42C1;">now</span><span style="color:#032F62;">()</span><span style="color:#032F62;">}\`</span></span>
<span class="line"><span style="color:#24292E;">    window[callback] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">data</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">resolve</span><span style="color:#24292E;">(data)</span></span>
<span class="line"><span style="color:#24292E;">      document.body.</span><span style="color:#6F42C1;">removeChild</span><span style="color:#24292E;">(scriptEle)</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    params.cb </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> callback</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">scriptEle</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> document.</span><span style="color:#6F42C1;">createElement</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;script&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    scriptEle.src </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">\`\${</span><span style="color:#24292E;">url</span><span style="color:#032F62;">}\${</span><span style="color:#24292E;">url</span><span style="color:#032F62;">.</span><span style="color:#6F42C1;">includes</span><span style="color:#032F62;">(</span><span style="color:#032F62;">&#39;?&#39;</span><span style="color:#032F62;">) </span><span style="color:#D73A49;">?</span><span style="color:#032F62;"> </span><span style="color:#032F62;">&#39;&amp;&#39;</span><span style="color:#032F62;"> </span><span style="color:#D73A49;">:</span><span style="color:#032F62;"> </span><span style="color:#032F62;">&#39;?&#39;}\${</span><span style="color:#6F42C1;">normalizeParams</span><span style="color:#032F62;">(</span><span style="color:#24292E;">params</span><span style="color:#032F62;">)</span><span style="color:#032F62;">}\`</span></span>
<span class="line"><span style="color:#24292E;">    document.body.</span><span style="color:#6F42C1;">appendChild</span><span style="color:#24292E;">(scriptEle)</span></span>
<span class="line"><span style="color:#24292E;">  })</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">jsonp</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;https://www.baidu.com/sugrec&#39;</span><span style="color:#24292E;">, {</span></span>
<span class="line"><span style="color:#24292E;">  prod: </span><span style="color:#032F62;">&#39;pc&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  wd: </span><span style="color:#032F62;">&#39;跨域&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">}).</span><span style="color:#6F42C1;">then</span><span style="color:#24292E;">((</span><span style="color:#E36209;">res</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(res)</span></span>
<span class="line"><span style="color:#24292E;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br></div></div></details><div class="tip custom-block"><p class="custom-block-title">JSONP 跨域优缺点</p><ul><li>优点: 实现简单，兼容性好</li><li>缺点 <ul><li>只支持 <code>GET</code> 请求</li><li>容易遭受 <code>XSS</code> 攻击</li></ul></li></ul></div><p><a href="https://juejin.cn/post/6844904126246027278" target="_blank" rel="noreferrer">了解更多跨域解决方案请点击 —— 10 种跨域解决方案</a></p><h2 id="浏览器缓存机制" tabindex="-1">浏览器缓存机制 <a class="header-anchor" href="#浏览器缓存机制" aria-label="Permalink to &quot;浏览器缓存机制&quot;">​</a></h2><ul><li><ol><li>浏览器在发送请求前先判断是否命中强缓存</li></ol><ul><li>命中则不发送请求直接使用缓存，否则进行下一步</li></ul></li><li><ol start="2"><li>浏览器发送请求后会由服务器判断是否命中协商缓存</li></ol><ul><li>命中则从缓存获取资源，否则进行下一步</li></ul></li><li><ol start="3"><li>浏览器直接使用服务器返回的资源并更新缓存</li></ol></li></ul><h3 id="强缓存-200-ok" tabindex="-1">强缓存（200 OK） <a class="header-anchor" href="#强缓存-200-ok" aria-label="Permalink to &quot;强缓存（200 OK）&quot;">​</a></h3><ul><li><code>Expires</code> 是服务器告诉浏览器的缓存过期时间（值为 <code>GMT</code> 时间，即格林尼治时间） <ul><li><code>HTTP1.0</code> 的产物</li><li>受本地时间影响</li><li>设置的值为 <code>max-age=xxx</code>（xxx 是 秒）</li></ul></li><li><code>Cache-Control</code> 用于控制缓存的行为 <ul><li>是 <code>HTTP1.1</code> 的产物</li><li>取值 <ul><li><code>public</code>：允许被客户端和代理服务器缓存</li><li><code>private</code>：只允许被客户端缓存（默认值）</li><li><code>no-cache</code>：允许被客户端和代理服务器缓存，但在使用缓存时需要经过协商缓存来验证决定</li><li><code>no-store</code>：所有内容都不会被缓存，即不使用强制缓存也不使用协商缓存每次请求都会下载完整的资源</li><li><code>maxage=xxx</code>：设置客户端和代理服务器的缓存时间，表示缓存内容将在 xxx 秒后失效</li><li><code>s-maxage=xxx</code>：设置代理服务器的缓存时间（优先级比 <code>max-age</code> 高）</li></ul></li></ul></li></ul><div class="warning custom-block"><p class="custom-block-title">Cache-Control 注意点</p><p><code>no-cache</code> 名字存在误导，其并不是不缓存数据，只是在使用缓存时需要经过协商缓存来验证决定<br><code>max-age=0</code> 和 <code>no-cache</code> 效果一致</p></div><h4 id="缓存位置" tabindex="-1">缓存位置 <a class="header-anchor" href="#缓存位置" aria-label="Permalink to &quot;缓存位置&quot;">​</a></h4><ul><li>内存缓存（memory cache） <ul><li>快速读取（内存缓存将编译解析后的文件，直接存入该进程的内存中，占据该进程一定的内存资源，以方便下次运行使用时的快速读取）</li><li>进程关闭时数据会被清除</li><li>不请求网络资源，资源存在内存中一般 <code>JS</code> 和图片文件会存入内存</li><li>状态码：<code>200（from memory cache）</code></li></ul></li><li>硬盘缓存（disk cache） <ul><li>写入硬盘文件进行 <code>I/O</code> 操作</li><li>进程关闭时数据不会被清除</li><li>速度比 <code>memory cache</code> 慢</li><li>不请求网络资源，资源存在磁盘中一般非脚本会存在磁盘中，如 <code>css</code></li><li>状态码：<code>200（from disk cache）</code></li></ul></li><li>代理服务器缓存（server worker） <ul><li>可以拦截处理页面的所有网络请求</li><li>仅 <code>HTTPS</code> 下可用、存在兼容问题</li><li>状态码：<code>200（from service worker）</code></li></ul></li></ul><h3 id="协商缓存-304-not-modified" tabindex="-1">协商缓存（304 Not Modified） <a class="header-anchor" href="#协商缓存-304-not-modified" aria-label="Permalink to &quot;协商缓存（304 Not Modified）&quot;">​</a></h3><h4 id="last-modified-和-if-modified-since" tabindex="-1"><code>Last-Modified</code> 和 <code>If-Modified-Since</code> <a class="header-anchor" href="#last-modified-和-if-modified-since" aria-label="Permalink to &quot;\`Last-Modified\` 和 \`If-Modified-Since\`&quot;">​</a></h4><p><code>Last-Modified</code> 表示资源的最后修改时间，值为 <code>GMT</code> 格式时间字符串，精确到秒</p><ul><li>浏览器第一次请求时，服务器会在响应头中返回请求资源的上次更新时间 <code>Last-Modified</code></li><li>当浏览器再次请求时，会在请求头中携带 <code>If-Modified-Since</code> 值为上次请求返回的 <code>Last-Modified</code></li><li>服务器收到请求后，会根据请求头中的 <code>If-Modified-Since</code> 和该资源在服务器的最后被修改时间做对比 <ul><li>大于 <code>If-Modified-Since</code> 重新返回资源文件，状态码为 200</li><li>小于 <code>If-Modified-Since</code> 资源无更新继续使用缓存文件，状态码为 304</li></ul></li></ul><div class="tip custom-block"><p class="custom-block-title">Last-Modified 存在的问题</p><ul><li>时间精度为秒级会出现误差情况，对文件修改精度有严格要求的场景不能满足</li><li>在集群服务器上各个服务器上的文件时间可能不同</li><li>如果用旧文件覆盖新文件，因为时间更前浏览器不会请求旧文件</li><li>编辑了文件但未修改，会导致缓存失效</li></ul></div><h4 id="etag-和-if-none-match" tabindex="-1">ETag 和 If-None-Match <a class="header-anchor" href="#etag-和-if-none-match" aria-label="Permalink to &quot;ETag 和 If-None-Match&quot;">​</a></h4><p><code>ETag</code> 是服务器通过算法对资源内容计算出的一个唯一标识（文件 <code>hash</code>）其有强弱之分</p><ul><li>强 <code>Etag</code><ul><li><code>ETag: &quot;&lt;etag_value&gt;&quot;</code></li><li>资源发生任何改变都会立刻更新</li><li>难生成，利于比较</li></ul></li><li>弱 <code>Etag</code>（使用 <code>W/</code> 标识） <ul><li><code>ETag: W/&quot;&lt;etag_value&gt;&quot;</code></li><li>只在资源发生本质变化时更新</li><li>易生成，不利于比较</li></ul></li></ul><h5 id="过程" tabindex="-1">过程 <a class="header-anchor" href="#过程" aria-label="Permalink to &quot;过程&quot;">​</a></h5><ul><li>浏览器第一次请求时，服务器会在响应头中返回当前资源文件的一个唯一标识 <code>ETag</code></li><li>当浏览器再次请求时，会在请求头中携带 <code>If-None-Match</code> 值为上次请求返回的 <code>ETag</code></li><li>通过接收的 <code>ETag</code> 和服务器重新生成的 <code>ETag</code> 进行对比 <ul><li>不一致 重新返回资源文件，状态码为 200</li><li>一致 资源无更新继续使用缓存文件，状态码为 304</li></ul></li></ul><div class="tip custom-block"><p class="custom-block-title">Last-Modified 和 Etag 对比</p><ul><li>精确度上：<code>Etag</code> 优于 <code>Last-Modified</code></li><li>性能上：<code>Etag &lt; Last-Modified</code> 每次生成 <code>ETag</code> 都需要进行读写操作，而 <code>Last-Modified</code> 只需要读取操作</li><li>优先级：服务器校验优先考虑 <code>Etag</code>（先判断 <code>Etag</code> 是否变化，如果 <code>Etag</code> 没有变化再判断 <code>Last-Modified</code>）</li></ul></div><h3 id="应用场景" tabindex="-1">应用场景 <a class="header-anchor" href="#应用场景" aria-label="Permalink to &quot;应用场景&quot;">​</a></h3><table><thead><tr><th>强缓存</th><th>协商缓存</th></tr></thead><tbody><tr><td>不常变化的文件<br>带 hash 值的 css js 图片</td><td>频繁变动的文件<br>html 文件</td></tr></tbody></table><h3 id="用户行为对缓存的影响" tabindex="-1">用户行为对缓存的影响 <a class="header-anchor" href="#用户行为对缓存的影响" aria-label="Permalink to &quot;用户行为对缓存的影响&quot;">​</a></h3><ul><li>地址栏输入 <ul><li>查找 <code>disk cache</code>（磁盘缓存）中是否有匹配，有则使用缓存，没有则发送网络请求</li></ul></li><li>普通刷新（F5） <ul><li>因为浏览器 <code>tab</code> 标签并没有关闭，因此 <code>memory cache</code> （内存缓存）是可用的，会被优先使用，其次使用 <code>disk cache</code>（磁盘缓存）</li><li>跳过强缓存规则，直接走协商缓存</li></ul></li><li>强制刷新（Ctrl + F5） <ul><li>浏览器不使用缓存，因此发送的请求头部均带有 <code>Cache-control: no-cache</code> （为了兼容还带了 <code>Pragma: no-cache</code>）服务器直接返回 200 和最新内容。</li><li>跳过所有缓存规则</li></ul></li></ul><h2 id="浏览器存储" tabindex="-1">浏览器存储 <a class="header-anchor" href="#浏览器存储" aria-label="Permalink to &quot;浏览器存储&quot;">​</a></h2><h3 id="cookie" tabindex="-1">Cookie <a class="header-anchor" href="#cookie" aria-label="Permalink to &quot;Cookie&quot;">​</a></h3><p><code>Cookie</code>（也叫 <code>Web Cookie</code> 或浏览器 <code>Cookie</code>）是服务器发送到用户浏览器并保存在本地的一小块数据，它会在浏览器下次向同一服务器再发起请求时被携带并发送到服务器上。通常，它用于告知服务端两个请求是否来自同一浏览器，如保持用户的登录状态。<code>Cookie</code> 使基于无状态的 <code>HTTP</code> 协议记录稳定的状态信息成为了可能，<code>Cookie</code> 在存储时是以键值对的形式存在的</p><p><code>Cookie</code> 主要用于以下三个方面：</p><ul><li>会话状态管理（如用户登录状态、购物车、游戏分数或其它需要记录的信息）</li><li>个性化设置（如用户自定义设置、主题等）</li><li>浏览器行为跟踪（如跟踪分析用户行为等）</li></ul><p><code>Cookie</code> 的本职工作并非本地存储，而是“维持状态”，因当时并没有其它合适的存储办法而作为唯一的存储手段，所以会用其进行本地存储</p><h4 id="cookie-的生成和使用" tabindex="-1">Cookie 的生成和使用 <a class="header-anchor" href="#cookie-的生成和使用" aria-label="Permalink to &quot;Cookie 的生成和使用&quot;">​</a></h4><ul><li>服务器生成，通过 <code>http response header</code> 中的 <code>set-cookie</code></li><li>在 <code>JavaScript</code> 中使用 <code>document.cookie</code> 进行读写</li></ul><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">/* 读取 */</span></span>
<span class="line"><span style="color:#E1E4E8;">document.cookie</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">/* 写入 */</span></span>
<span class="line"><span style="color:#E1E4E8;">document.cookie </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;name=maomao&#39;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/* 读取 */</span></span>
<span class="line"><span style="color:#24292E;">document.cookie</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">/* 写入 */</span></span>
<span class="line"><span style="color:#24292E;">document.cookie </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;name=maomao&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><div class="tip custom-block"><p class="custom-block-title">Cookie 的缺点</p><ul><li><code>Cookie</code> 最大只能有 <code>4KB</code> 同时大多数浏览器对一个站点的 <code>Cookie</code> 个数也是有限制的</li><li>同一个域名下的所有请求都会携带 <code>Cookie</code> 从而带来不必要的开销和安全问题</li></ul></div><h3 id="web-storage" tabindex="-1">Web Storage <a class="header-anchor" href="#web-storage" aria-label="Permalink to &quot;Web Storage&quot;">​</a></h3><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Web_Storage_API" target="_blank" rel="noreferrer">Web Storage</a>是 <code>HTML5</code> 专门为浏览器存储而提供的数据存储机制，其大小限制为 <code>5MB ~ 10MB</code> (<a href="http://dev-test.nemikor.com/web-storage/support-test/" target="_blank" rel="noreferrer">去查看当前浏览器下 Web Storage 的容量限制</a>)，数据仅保存在客户端不与服务器进行通信</p><p><code>Web Storage</code> 提供了两种机制供我们使用</p><ul><li><code>Local Storage</code>(本地存储)</li><li><code>Session Storage</code>(会话存储)</li></ul><div class="tip custom-block"><p class="custom-block-title">LocalStorage</p><ul><li>保存的数据长期存在</li><li>在同源的所有标签页和窗口之间共享数据</li></ul></div><div class="tip custom-block"><p class="custom-block-title">SessionStorage</p><ul><li>数据只存在于当前浏览器的标签页</li><li><strong>在新标签或窗口打开一个页面时会复制顶级浏览会话的上下文作为新会话的上下文</strong><ul><li>在当前标签中打开一个同域下的页面时会复制当前标签页中的 <code>SessionStorage</code> 数据</li><li>复制的 <code>SessionStorage</code> 数据是独立的，不会相互影响(类似深拷贝)</li></ul></li><li>重新加载或恢复页面仍会保持原来的数据</li><li>关闭对应浏览器标签或窗口后数据会被清除</li></ul></div><h4 id="api-使用" tabindex="-1">API 使用 <a class="header-anchor" href="#api-使用" aria-label="Permalink to &quot;API 使用&quot;">​</a></h4><blockquote><p>以 <code>localStorage</code> 为例</p></blockquote><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">/* 存储数据 setItem() */</span></span>
<span class="line"><span style="color:#E1E4E8;">localStorage.</span><span style="color:#B392F0;">setItem</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;name&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;maomao&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">/* 读取数据 getItem() */</span></span>
<span class="line"><span style="color:#E1E4E8;">localStorage.</span><span style="color:#B392F0;">getItem</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;name&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">/* 删除指定数据 removeItem() */</span></span>
<span class="line"><span style="color:#E1E4E8;">localStorage.</span><span style="color:#B392F0;">removeItem</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;name&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">/* 清空数据 clear() */</span></span>
<span class="line"><span style="color:#E1E4E8;">localStorage.</span><span style="color:#B392F0;">clear</span><span style="color:#E1E4E8;">()</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/* 存储数据 setItem() */</span></span>
<span class="line"><span style="color:#24292E;">localStorage.</span><span style="color:#6F42C1;">setItem</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;name&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;maomao&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">/* 读取数据 getItem() */</span></span>
<span class="line"><span style="color:#24292E;">localStorage.</span><span style="color:#6F42C1;">getItem</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;name&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">/* 删除指定数据 removeItem() */</span></span>
<span class="line"><span style="color:#24292E;">localStorage.</span><span style="color:#6F42C1;">removeItem</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;name&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">/* 清空数据 clear() */</span></span>
<span class="line"><span style="color:#24292E;">localStorage.</span><span style="color:#6F42C1;">clear</span><span style="color:#24292E;">()</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><div class="tip custom-block"><p class="custom-block-title">sessionStorage localStorage 和 cookie 的区别</p><ul><li>相同点 <ul><li>都是在客户端保存数据</li><li>存储数据的类型都是字符串</li></ul></li><li>不同点 <ul><li>生命周期 <ul><li><code>Cookie</code>: 可以设置失效时间(默认是关闭浏览器后失效)</li><li><code>localStorage</code>: 除非被手动清除否则将会永久保存</li><li><code>sessionStorage</code>: 仅在当前浏览器的标签页下有效，关闭标签或窗口后就会被清除</li></ul></li><li>数据大小 <ul><li><code>Cookie</code>: 4KB</li><li><code>localStorage</code> 和 <code>sessionStorage</code>: <code>5MB ~ 10MB</code></li></ul></li><li>http 请求 <ul><li><code>Cookie</code>: 每次都会携带在 <code>HTTP</code> 请求头中</li><li><code>localStorage</code> 和 <code>sessionStorage</code>: 仅在客户储保存不会与服务器通信</li></ul></li></ul></li></ul></div><h3 id="indexeddb" tabindex="-1">IndexedDB <a class="header-anchor" href="#indexeddb" aria-label="Permalink to &quot;IndexedDB&quot;">​</a></h3><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/IndexedDB_API" target="_blank" rel="noreferrer">IndexedDB</a> 是一个运行在浏览器上的非关系型数据库，用于<strong>在客户端存储大量结构化数据</strong></p><div class="tip custom-block"><p class="custom-block-title">IndexedDB 的特点</p><ul><li>存储空间大(一般来说不少于 <code>250MB</code> 甚至没有上限)</li><li>支持存储二进制数据(<code>ArrayBuffer</code> 和 <code>Blob</code>)</li><li>键值对储存</li><li>同源限制</li><li>执行的操作是异步执行，以免阻塞应用程序</li><li>是一个事务型数据库系统</li></ul></div><h4 id="api-使用-1" tabindex="-1">API 使用 <a class="header-anchor" href="#api-使用-1" aria-label="Permalink to &quot;API 使用&quot;">​</a></h4><p>打开/创建一个 IndexedDB 数据库，并指定数据库的版本号 (版本号只能为整数)</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">request</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> window.indexedDB.</span><span style="color:#B392F0;">open</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;myDatabase&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> db</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 成功回调</span></span>
<span class="line"><span style="color:#E1E4E8;">request.</span><span style="color:#B392F0;">onsuccess</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">event</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 获取 indexedDB 实例</span></span>
<span class="line"><span style="color:#E1E4E8;">  db </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> event.target.result</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 也可以使用 request.result 获取 indexedDB 实例</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;连接 IndexedDB 成功&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 失败回调</span></span>
<span class="line"><span style="color:#E1E4E8;">request.</span><span style="color:#B392F0;">onerror</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> () {</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;连接 IndexedDB 失败&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">request</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> window.indexedDB.</span><span style="color:#6F42C1;">open</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;myDatabase&#39;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> db</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 成功回调</span></span>
<span class="line"><span style="color:#24292E;">request.</span><span style="color:#6F42C1;">onsuccess</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">event</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 获取 indexedDB 实例</span></span>
<span class="line"><span style="color:#24292E;">  db </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> event.target.result</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 也可以使用 request.result 获取 indexedDB 实例</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;连接 IndexedDB 成功&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 失败回调</span></span>
<span class="line"><span style="color:#24292E;">request.</span><span style="color:#6F42C1;">onerror</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> () {</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;连接 IndexedDB 失败&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p>创建一个对象仓库(类似于数据库中的表)</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// upgradeneeded 事件会在初始化数据库或版本发生更新时被调用</span></span>
<span class="line"><span style="color:#E1E4E8;">request.</span><span style="color:#B392F0;">onupgradeneeded</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">event</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">db</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> event.target.result</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 创建对象仓库并指定主键</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">objectStore</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> db.</span><span style="color:#B392F0;">createObjectStore</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;userInfo&#39;</span><span style="color:#E1E4E8;">, {</span></span>
<span class="line"><span style="color:#E1E4E8;">    keyPath: </span><span style="color:#9ECBFF;">&#39;id&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    autoIncrement: </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  })</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;创建对象仓库成功&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;">   * 定义存储对象的数据项</span></span>
<span class="line"><span style="color:#6A737D;">   * 第一个参数是创建的索引名称，可以为空</span></span>
<span class="line"><span style="color:#6A737D;">   * 第二个参数是索引使用的关键名称，可以为空</span></span>
<span class="line"><span style="color:#6A737D;">   * 第三个参数是可选配置参数，可以不传，常用参数之一就是 unique ，表示该字段是否唯一，不能重复</span></span>
<span class="line"><span style="color:#6A737D;">   */</span></span>
<span class="line"><span style="color:#E1E4E8;">  objectStore.</span><span style="color:#B392F0;">createIndex</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;id&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;id&#39;</span><span style="color:#E1E4E8;">, {</span></span>
<span class="line"><span style="color:#E1E4E8;">    unique: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  })</span></span>
<span class="line"><span style="color:#E1E4E8;">  objectStore.</span><span style="color:#B392F0;">createIndex</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;name&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;name&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// upgradeneeded 事件会在初始化数据库或版本发生更新时被调用</span></span>
<span class="line"><span style="color:#24292E;">request.</span><span style="color:#6F42C1;">onupgradeneeded</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">event</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">db</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> event.target.result</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 创建对象仓库并指定主键</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">objectStore</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> db.</span><span style="color:#6F42C1;">createObjectStore</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;userInfo&#39;</span><span style="color:#24292E;">, {</span></span>
<span class="line"><span style="color:#24292E;">    keyPath: </span><span style="color:#032F62;">&#39;id&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    autoIncrement: </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  })</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;创建对象仓库成功&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;">   * 定义存储对象的数据项</span></span>
<span class="line"><span style="color:#6A737D;">   * 第一个参数是创建的索引名称，可以为空</span></span>
<span class="line"><span style="color:#6A737D;">   * 第二个参数是索引使用的关键名称，可以为空</span></span>
<span class="line"><span style="color:#6A737D;">   * 第三个参数是可选配置参数，可以不传，常用参数之一就是 unique ，表示该字段是否唯一，不能重复</span></span>
<span class="line"><span style="color:#6A737D;">   */</span></span>
<span class="line"><span style="color:#24292E;">  objectStore.</span><span style="color:#6F42C1;">createIndex</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;id&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;id&#39;</span><span style="color:#24292E;">, {</span></span>
<span class="line"><span style="color:#24292E;">    unique: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  })</span></span>
<span class="line"><span style="color:#24292E;">  objectStore.</span><span style="color:#6F42C1;">createIndex</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;name&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;name&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><p>添加数据</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 创建事务指并定表格名称和读写权限</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">transaction</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> db.</span><span style="color:#B392F0;">transaction</span><span style="color:#E1E4E8;">([</span><span style="color:#9ECBFF;">&#39;userInfo&#39;</span><span style="color:#E1E4E8;">], </span><span style="color:#9ECBFF;">&#39;readwrite&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#6A737D;">// 获取 Object Store 对象</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">objectStore</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> transaction.</span><span style="color:#B392F0;">objectStore</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;userInfo&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">/* 添加数据 */</span></span>
<span class="line"><span style="color:#E1E4E8;">objectStore.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">({ id: </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, name: </span><span style="color:#9ECBFF;">&#39;test&#39;</span><span style="color:#E1E4E8;"> })</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 创建事务指并定表格名称和读写权限</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">transaction</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> db.</span><span style="color:#6F42C1;">transaction</span><span style="color:#24292E;">([</span><span style="color:#032F62;">&#39;userInfo&#39;</span><span style="color:#24292E;">], </span><span style="color:#032F62;">&#39;readwrite&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#6A737D;">// 获取 Object Store 对象</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">objectStore</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> transaction.</span><span style="color:#6F42C1;">objectStore</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;userInfo&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">/* 添加数据 */</span></span>
<span class="line"><span style="color:#24292E;">objectStore.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">({ id: </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, name: </span><span style="color:#032F62;">&#39;test&#39;</span><span style="color:#24292E;"> })</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>获取数据</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">transaction</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> db.</span><span style="color:#B392F0;">transaction</span><span style="color:#E1E4E8;">([</span><span style="color:#9ECBFF;">&#39;userInfo&#39;</span><span style="color:#E1E4E8;">], </span><span style="color:#9ECBFF;">&#39;readonly&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">objectStore</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> transaction.</span><span style="color:#B392F0;">objectStore</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;userInfo&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">objectStoreRequest</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> objectStore.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">objectStoreRequest.</span><span style="color:#B392F0;">onsuccess</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> () {</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;获取数据&#39;</span><span style="color:#E1E4E8;">, objectStoreRequest.result)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">transaction</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> db.</span><span style="color:#6F42C1;">transaction</span><span style="color:#24292E;">([</span><span style="color:#032F62;">&#39;userInfo&#39;</span><span style="color:#24292E;">], </span><span style="color:#032F62;">&#39;readonly&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">objectStore</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> transaction.</span><span style="color:#6F42C1;">objectStore</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;userInfo&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">objectStoreRequest</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> objectStore.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">objectStoreRequest.</span><span style="color:#6F42C1;">onsuccess</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> () {</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;获取数据&#39;</span><span style="color:#24292E;">, objectStoreRequest.result)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>修改数据</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">transaction</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> db.</span><span style="color:#B392F0;">transaction</span><span style="color:#E1E4E8;">([</span><span style="color:#9ECBFF;">&#39;userInfo&#39;</span><span style="color:#E1E4E8;">], </span><span style="color:#9ECBFF;">&#39;readwrite&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">objectStore</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> transaction.</span><span style="color:#B392F0;">objectStore</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;userInfo&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">objectStoreRequest</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> objectStore.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">objectStoreRequest.</span><span style="color:#B392F0;">onsuccess</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> () {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">data</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> objectStoreRequest.result</span></span>
<span class="line"><span style="color:#E1E4E8;">  data.name </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;maomao&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">  objectStore.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(data)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">transaction</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> db.</span><span style="color:#6F42C1;">transaction</span><span style="color:#24292E;">([</span><span style="color:#032F62;">&#39;userInfo&#39;</span><span style="color:#24292E;">], </span><span style="color:#032F62;">&#39;readwrite&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">objectStore</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> transaction.</span><span style="color:#6F42C1;">objectStore</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;userInfo&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">objectStoreRequest</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> objectStore.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">objectStoreRequest.</span><span style="color:#6F42C1;">onsuccess</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> () {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">data</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> objectStoreRequest.result</span></span>
<span class="line"><span style="color:#24292E;">  data.name </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;maomao&#39;</span></span>
<span class="line"><span style="color:#24292E;">  objectStore.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(data)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>删除数据</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">transaction</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> db.</span><span style="color:#B392F0;">transaction</span><span style="color:#E1E4E8;">([</span><span style="color:#9ECBFF;">&#39;userInfo&#39;</span><span style="color:#E1E4E8;">], </span><span style="color:#9ECBFF;">&#39;readwrite&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">objectStore</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> transaction.</span><span style="color:#B392F0;">objectStore</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;userInfo&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">objectStoreRequest</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> objectStore.</span><span style="color:#B392F0;">delete</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">objectStoreRequest.</span><span style="color:#B392F0;">onsuccess</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> () {</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;删除成功&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">transaction</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> db.</span><span style="color:#6F42C1;">transaction</span><span style="color:#24292E;">([</span><span style="color:#032F62;">&#39;userInfo&#39;</span><span style="color:#24292E;">], </span><span style="color:#032F62;">&#39;readwrite&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">objectStore</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> transaction.</span><span style="color:#6F42C1;">objectStore</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;userInfo&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">objectStoreRequest</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> objectStore.</span><span style="color:#6F42C1;">delete</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">objectStoreRequest.</span><span style="color:#6F42C1;">onsuccess</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> () {</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;删除成功&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><div class="tip custom-block"><p class="custom-block-title">在日常开发中可以使用如下类库简化代码量</p><ul><li><a href="https://github.com/localForage/localForage" target="_blank" rel="noreferrer">localForage</a> 一个提供 <code>name:value</code> 的简单语法的客户端数据存储垫片，基于 <code>IndexedDB</code> 实现，并在不持支 <code>IndexedDB</code> 的浏览器中自动回退到 <code>WebSQL</code> 和 <code>localStorage</code></li><li><a href="https://github.com/dexie/Dexie.js" target="_blank" rel="noreferrer">Dexie.js</a> 对 <code>IndexedDB</code> 的封装，通过提供更友好和简单语法进行快速的编码开发</li><li><a href="https://github.com/pouchdb/pouchdb" target="_blank" rel="noreferrer">PouchDB</a> 对 <code>IndexedDB</code> 的封装，通过提供更友好和简单语法进行快速的编码开发</li></ul></div>`,101),t=[c];function r(i,E,y,d,u,b){return a(),n("div",null,t)}const h=s(p,[["render",r]]);export{m as __pageData,h as default};
