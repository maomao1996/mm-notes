import{_ as s,o as n,g as a,Q as l}from"./chunks/framework.4c5231b1.js";const u=JSON.parse('{"title":"commitMutationEffects","description":"茂茂的 React v18.2.0 源码阅读笔记 —— commitMutationEffects","frontmatter":{"description":"茂茂的 React v18.2.0 源码阅读笔记 —— commitMutationEffects"},"headers":[],"relativePath":"analysis/react/18.2.0/process/commitMutationEffects.md","filePath":"analysis/react/18.2.0/process/commitMutationEffects.md","lastUpdated":1697968286000}'),p={name:"analysis/react/18.2.0/process/commitMutationEffects.md"},e=l(`<h1 id="commitmutationeffects" tabindex="-1"><code>commitMutationEffects</code> <a class="header-anchor" href="#commitmutationeffects" aria-label="Permalink to &quot;\`commitMutationEffects\`&quot;">​</a></h1><p>在 <code>commitRootImpl()</code> 中会调用 <code>commitMutationEffects</code>，进入 <strong>mutation 阶段</strong>（即执行 DOM 操作）</p><div class="language-ts vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">commitMutationEffects</span><span style="color:#E1E4E8;">(root, finishedWork, lanes)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">commitMutationEffects</span><span style="color:#24292E;">(root, finishedWork, lanes)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><blockquote><p>源码地址 <a href="https://github.com/maomao1996/code-analysis/blob/9a3aa89acc830353e3795276b0eda4e96e840975/react-v18.2.0/src/react/packages/react-reconciler/src/ReactFiberCommitWork.old.js#L2036" target="_blank" rel="noreferrer">commitMutationEffects() | react-reconciler/src/ReactFiberCommitWork.old.js</a></p></blockquote><div class="language-ts vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark has-highlighted-lines vp-code-dark"><code><span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">commitMutationEffects</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">root</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">FiberRoot</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">finishedWork</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Fiber</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">committedLanes</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Lanes</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  inProgressLanes </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> committedLanes</span></span>
<span class="line"><span style="color:#E1E4E8;">  inProgressRoot </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> root</span></span>
<span class="line"></span>
<span class="line highlighted"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">commitMutationEffectsOnFiber</span><span style="color:#E1E4E8;">(finishedWork, root, committedLanes)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  inProgressLanes </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span></span>
<span class="line"><span style="color:#E1E4E8;">  inProgressRoot </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light has-highlighted-lines vp-code-light"><code><span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">commitMutationEffects</span><span style="color:#24292E;">(</span><span style="color:#E36209;">root</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">FiberRoot</span><span style="color:#24292E;">, </span><span style="color:#E36209;">finishedWork</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Fiber</span><span style="color:#24292E;">, </span><span style="color:#E36209;">committedLanes</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Lanes</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  inProgressLanes </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> committedLanes</span></span>
<span class="line"><span style="color:#24292E;">  inProgressRoot </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> root</span></span>
<span class="line"></span>
<span class="line highlighted"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">commitMutationEffectsOnFiber</span><span style="color:#24292E;">(finishedWork, root, committedLanes)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  inProgressLanes </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span></span>
<span class="line"><span style="color:#24292E;">  inProgressRoot </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h2 id="commitmutationeffectsonfiber" tabindex="-1"><code>commitMutationEffectsOnFiber</code> <a class="header-anchor" href="#commitmutationeffectsonfiber" aria-label="Permalink to &quot;\`commitMutationEffectsOnFiber\`&quot;">​</a></h2><p><code>commitMutationEffectsOnFiber</code> 函数中会处理进行如下操作：</p><ul><li>调用 <code>recursivelyTraverseMutationEffects</code> 函数递归遍历子 Fiber 树</li><li>调用 <code>commitReconciliationEffects</code> 函数</li><li>处理 <strong>Update</strong> 副作用（更新）</li><li>处理 <strong>Ref</strong> 副作用（卸载 Ref）</li><li>处理 <strong>ContentReset</strong> 副作用（重置文本内容）</li></ul><blockquote><p>源码地址 <a href="https://github.com/maomao1996/code-analysis/blob/9a3aa89acc830353e3795276b0eda4e96e840975/react-v18.2.0/src/react/packages/react-reconciler/src/ReactFiberCommitWork.old.js#L2083" target="_blank" rel="noreferrer">commitMutationEffectsOnFiber() | react-reconciler/src/ReactFiberCommitWork.old.js</a></p></blockquote><div class="language-ts vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark has-highlighted-lines vp-code-dark"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">commitMutationEffectsOnFiber</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FFAB70;">finishedWork</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Fiber</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FFAB70;">root</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">FiberRoot</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FFAB70;">lanes</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Lanes</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">current</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> finishedWork.alternate;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">flags</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> finishedWork.flags;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// The effect flag should be checked *after* we refine the type of fiber,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// because the fiber tag is more specific. An exception is any flag related</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// to reconcilation, because those can be set on all fiber types.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 根据 tag 进入不同的处理函数</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">switch</span><span style="color:#E1E4E8;"> (finishedWork.tag) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> FunctionComponent:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> ForwardRef:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> MemoComponent:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> SimpleMemoComponent: {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">recursivelyTraverseMutationEffects</span><span style="color:#E1E4E8;">(root, finishedWork, lanes);</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">commitReconciliationEffects</span><span style="color:#E1E4E8;">(finishedWork);</span></span>
<span class="line"></span>
<span class="line highlighted"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// 处理 Update 副作用</span></span>
<span class="line highlighted"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (flags </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> Update) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#6A737D;">// 执行 useEffect 卸载函数</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#B392F0;">commitHookEffectListUnmount</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">            HookInsertion </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> HookHasEffect,</span></span>
<span class="line"><span style="color:#E1E4E8;">            finishedWork,</span></span>
<span class="line"><span style="color:#E1E4E8;">            finishedWork.return,</span></span>
<span class="line"><span style="color:#E1E4E8;">          );</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#6A737D;">// 执行 useEffect 挂载函数</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#B392F0;">commitHookEffectListMount</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">            HookInsertion </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> HookHasEffect,</span></span>
<span class="line"><span style="color:#E1E4E8;">            finishedWork,</span></span>
<span class="line"><span style="color:#E1E4E8;">          );</span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (error) {</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#B392F0;">captureCommitPhaseError</span><span style="color:#E1E4E8;">(finishedWork, finishedWork.return, error);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// Layout effects are destroyed during the mutation phase so that all</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// destroy functions for all fibers are called before any create functions.</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// This prevents sibling component effects from interfering with each other,</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// e.g. a destroy function in one component should never override a ref set</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// by a create function in another component during the same commit.</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 执行依赖更新时的 useLayoutEffect 卸载函数</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span></span>
<span class="line"><span style="color:#E1E4E8;">          enableProfilerTimer </span><span style="color:#F97583;">&amp;&amp;</span></span>
<span class="line"><span style="color:#E1E4E8;">          enableProfilerCommitHooks </span><span style="color:#F97583;">&amp;&amp;</span></span>
<span class="line"><span style="color:#E1E4E8;">          finishedWork.mode </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> ProfileMode</span></span>
<span class="line"><span style="color:#E1E4E8;">        ) {</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#B392F0;">startLayoutEffectTimer</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#B392F0;">commitHookEffectListUnmount</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">              HookLayout </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> HookHasEffect,</span></span>
<span class="line"><span style="color:#E1E4E8;">              finishedWork,</span></span>
<span class="line"><span style="color:#E1E4E8;">              finishedWork.return,</span></span>
<span class="line"><span style="color:#E1E4E8;">            );</span></span>
<span class="line"><span style="color:#E1E4E8;">          } </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (error) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#B392F0;">captureCommitPhaseError</span><span style="color:#E1E4E8;">(finishedWork, finishedWork.return, error);</span></span>
<span class="line"><span style="color:#E1E4E8;">          }</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#B392F0;">recordLayoutEffectDuration</span><span style="color:#E1E4E8;">(finishedWork);</span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#B392F0;">commitHookEffectListUnmount</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">              HookLayout </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> HookHasEffect,</span></span>
<span class="line"><span style="color:#E1E4E8;">              finishedWork,</span></span>
<span class="line"><span style="color:#E1E4E8;">              finishedWork.return,</span></span>
<span class="line"><span style="color:#E1E4E8;">            );</span></span>
<span class="line"><span style="color:#E1E4E8;">          } </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (error) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#B392F0;">captureCommitPhaseError</span><span style="color:#E1E4E8;">(finishedWork, finishedWork.return, error);</span></span>
<span class="line"><span style="color:#E1E4E8;">          }</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> ClassComponent: {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">recursivelyTraverseMutationEffects</span><span style="color:#E1E4E8;">(root, finishedWork, lanes);</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">commitReconciliationEffects</span><span style="color:#E1E4E8;">(finishedWork);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// 存在 Ref 副作用时，卸载 Ref</span></span>
<span class="line highlighted"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (flags </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> Ref) {</span></span>
<span class="line highlighted"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (current </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#B392F0;">safelyDetachRef</span><span style="color:#E1E4E8;">(current, current.return);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> HostComponent: {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">recursivelyTraverseMutationEffects</span><span style="color:#E1E4E8;">(root, finishedWork, lanes);</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">commitReconciliationEffects</span><span style="color:#E1E4E8;">(finishedWork);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// 处理 Ref 副作用（卸载 Ref）</span></span>
<span class="line highlighted"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (flags </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> Ref) {</span></span>
<span class="line highlighted"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (current </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#B392F0;">safelyDetachRef</span><span style="color:#E1E4E8;">(current, current.return);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (supportsMutation) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// TODO: ContentReset gets cleared by the children during the commit</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// phase. This is a refactor hazard because it means we must read</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// flags the flags after \`commitReconciliationEffects\` has already run;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// the order matters. We should refactor so that ContentReset does not</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// rely on mutating the flag during commit. Like by setting a flag</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// during the render phase instead.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 处理 ContentReset 副作用（重置文本内容）</span></span>
<span class="line highlighted"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (finishedWork.flags </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> ContentReset) {</span></span>
<span class="line highlighted"><span style="color:#E1E4E8;">          </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">instance</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Instance</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> finishedWork.stateNode;</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 重置文本内容</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#B392F0;">resetTextContent</span><span style="color:#E1E4E8;">(instance);</span></span>
<span class="line"><span style="color:#E1E4E8;">          } </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (error) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#B392F0;">captureCommitPhaseError</span><span style="color:#E1E4E8;">(finishedWork, finishedWork.return, error);</span></span>
<span class="line"><span style="color:#E1E4E8;">          }</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 处理 Update 副作用（更新 DOM 节点）</span></span>
<span class="line highlighted"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (flags </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> Update) {</span></span>
<span class="line highlighted"><span style="color:#E1E4E8;">          </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">instance</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Instance</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> finishedWork.stateNode;</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (instance </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// Commit the work prepared earlier.</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">newProps</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> finishedWork.memoizedProps;</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// For hydration we reuse the update path but we treat the oldProps</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// as the newProps. The updatePayload will contain the real change in</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// this case.</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">oldProps</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span></span>
<span class="line"><span style="color:#E1E4E8;">              current </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> current.memoizedProps </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> newProps;</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">type</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> finishedWork.type;</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// TODO: Type the updateQueue to be specific to host components.</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">updatePayload</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">UpdatePayload</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (finishedWork.updateQueue: any);</span></span>
<span class="line"><span style="color:#E1E4E8;">            finishedWork.updateQueue </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (updatePayload </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">              </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#6A737D;">// 更新 DOM 节点</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#B392F0;">commitUpdate</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">                  instance,</span></span>
<span class="line"><span style="color:#E1E4E8;">                  updatePayload,</span></span>
<span class="line"><span style="color:#E1E4E8;">                  type,</span></span>
<span class="line"><span style="color:#E1E4E8;">                  oldProps,</span></span>
<span class="line"><span style="color:#E1E4E8;">                  newProps,</span></span>
<span class="line"><span style="color:#E1E4E8;">                  finishedWork,</span></span>
<span class="line"><span style="color:#E1E4E8;">                );</span></span>
<span class="line"><span style="color:#E1E4E8;">              } </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (error) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#B392F0;">captureCommitPhaseError</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">                  finishedWork,</span></span>
<span class="line"><span style="color:#E1E4E8;">                  finishedWork.return,</span></span>
<span class="line"><span style="color:#E1E4E8;">                  error,</span></span>
<span class="line"><span style="color:#E1E4E8;">                );</span></span>
<span class="line"><span style="color:#E1E4E8;">              }</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">          }</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> HostText: {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">recursivelyTraverseMutationEffects</span><span style="color:#E1E4E8;">(root, finishedWork, lanes);</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">commitReconciliationEffects</span><span style="color:#E1E4E8;">(finishedWork);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// 处理 Update 副作用（更新文本节点）</span></span>
<span class="line highlighted"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (flags </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> Update) {</span></span>
<span class="line highlighted"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (supportsMutation) {</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (finishedWork.stateNode </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Error</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">              </span><span style="color:#9ECBFF;">&#39;This should have a text node initialized. This error is likely &#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#9ECBFF;">&#39;caused by a bug in React. Please file an issue.&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">            );</span></span>
<span class="line"><span style="color:#E1E4E8;">          }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">textInstance</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TextInstance</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> finishedWork.stateNode;</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">newText</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">string</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> finishedWork.memoizedProps;</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#6A737D;">// For hydration we reuse the update path but we treat the oldProps</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#6A737D;">// as the newProps. The updatePayload will contain the real change in</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#6A737D;">// this case.</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">oldText</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">string</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span></span>
<span class="line"><span style="color:#E1E4E8;">            current </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> current.memoizedProps </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> newText;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 更新文本节点</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#B392F0;">commitTextUpdate</span><span style="color:#E1E4E8;">(textInstance, oldText, newText);</span></span>
<span class="line"><span style="color:#E1E4E8;">          } </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (error) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#B392F0;">captureCommitPhaseError</span><span style="color:#E1E4E8;">(finishedWork, finishedWork.return, error);</span></span>
<span class="line"><span style="color:#E1E4E8;">          }</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> HostRoot:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> HostPortal:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> SuspenseComponent:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> OffscreenComponent:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> SuspenseListComponent:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> ScopeComponent:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;">: {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">recursivelyTraverseMutationEffects</span><span style="color:#E1E4E8;">(root, finishedWork, lanes);</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">commitReconciliationEffects</span><span style="color:#E1E4E8;">(finishedWork);</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light has-highlighted-lines vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">commitMutationEffectsOnFiber</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">finishedWork</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Fiber</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">root</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">FiberRoot</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">lanes</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Lanes</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">current</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> finishedWork.alternate;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">flags</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> finishedWork.flags;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// The effect flag should be checked *after* we refine the type of fiber,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// because the fiber tag is more specific. An exception is any flag related</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// to reconcilation, because those can be set on all fiber types.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 根据 tag 进入不同的处理函数</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">switch</span><span style="color:#24292E;"> (finishedWork.tag) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> FunctionComponent:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> ForwardRef:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> MemoComponent:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> SimpleMemoComponent: {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">recursivelyTraverseMutationEffects</span><span style="color:#24292E;">(root, finishedWork, lanes);</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">commitReconciliationEffects</span><span style="color:#24292E;">(finishedWork);</span></span>
<span class="line"></span>
<span class="line highlighted"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// 处理 Update 副作用</span></span>
<span class="line highlighted"><span style="color:#24292E;">      </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (flags </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> Update) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#6A737D;">// 执行 useEffect 卸载函数</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#6F42C1;">commitHookEffectListUnmount</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">            HookInsertion </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> HookHasEffect,</span></span>
<span class="line"><span style="color:#24292E;">            finishedWork,</span></span>
<span class="line"><span style="color:#24292E;">            finishedWork.return,</span></span>
<span class="line"><span style="color:#24292E;">          );</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#6A737D;">// 执行 useEffect 挂载函数</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#6F42C1;">commitHookEffectListMount</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">            HookInsertion </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> HookHasEffect,</span></span>
<span class="line"><span style="color:#24292E;">            finishedWork,</span></span>
<span class="line"><span style="color:#24292E;">          );</span></span>
<span class="line"><span style="color:#24292E;">        } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (error) {</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#6F42C1;">captureCommitPhaseError</span><span style="color:#24292E;">(finishedWork, finishedWork.return, error);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// Layout effects are destroyed during the mutation phase so that all</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// destroy functions for all fibers are called before any create functions.</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// This prevents sibling component effects from interfering with each other,</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// e.g. a destroy function in one component should never override a ref set</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// by a create function in another component during the same commit.</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 执行依赖更新时的 useLayoutEffect 卸载函数</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span></span>
<span class="line"><span style="color:#24292E;">          enableProfilerTimer </span><span style="color:#D73A49;">&amp;&amp;</span></span>
<span class="line"><span style="color:#24292E;">          enableProfilerCommitHooks </span><span style="color:#D73A49;">&amp;&amp;</span></span>
<span class="line"><span style="color:#24292E;">          finishedWork.mode </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> ProfileMode</span></span>
<span class="line"><span style="color:#24292E;">        ) {</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">startLayoutEffectTimer</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">commitHookEffectListUnmount</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">              HookLayout </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> HookHasEffect,</span></span>
<span class="line"><span style="color:#24292E;">              finishedWork,</span></span>
<span class="line"><span style="color:#24292E;">              finishedWork.return,</span></span>
<span class="line"><span style="color:#24292E;">            );</span></span>
<span class="line"><span style="color:#24292E;">          } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (error) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">captureCommitPhaseError</span><span style="color:#24292E;">(finishedWork, finishedWork.return, error);</span></span>
<span class="line"><span style="color:#24292E;">          }</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#6F42C1;">recordLayoutEffectDuration</span><span style="color:#24292E;">(finishedWork);</span></span>
<span class="line"><span style="color:#24292E;">        } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">commitHookEffectListUnmount</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">              HookLayout </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> HookHasEffect,</span></span>
<span class="line"><span style="color:#24292E;">              finishedWork,</span></span>
<span class="line"><span style="color:#24292E;">              finishedWork.return,</span></span>
<span class="line"><span style="color:#24292E;">            );</span></span>
<span class="line"><span style="color:#24292E;">          } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (error) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">captureCommitPhaseError</span><span style="color:#24292E;">(finishedWork, finishedWork.return, error);</span></span>
<span class="line"><span style="color:#24292E;">          }</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> ClassComponent: {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">recursivelyTraverseMutationEffects</span><span style="color:#24292E;">(root, finishedWork, lanes);</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">commitReconciliationEffects</span><span style="color:#24292E;">(finishedWork);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// 存在 Ref 副作用时，卸载 Ref</span></span>
<span class="line highlighted"><span style="color:#24292E;">      </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (flags </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> Ref) {</span></span>
<span class="line highlighted"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (current </span><span style="color:#D73A49;">!==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#6F42C1;">safelyDetachRef</span><span style="color:#24292E;">(current, current.return);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> HostComponent: {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">recursivelyTraverseMutationEffects</span><span style="color:#24292E;">(root, finishedWork, lanes);</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">commitReconciliationEffects</span><span style="color:#24292E;">(finishedWork);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// 处理 Ref 副作用（卸载 Ref）</span></span>
<span class="line highlighted"><span style="color:#24292E;">      </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (flags </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> Ref) {</span></span>
<span class="line highlighted"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (current </span><span style="color:#D73A49;">!==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#6F42C1;">safelyDetachRef</span><span style="color:#24292E;">(current, current.return);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (supportsMutation) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// TODO: ContentReset gets cleared by the children during the commit</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// phase. This is a refactor hazard because it means we must read</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// flags the flags after \`commitReconciliationEffects\` has already run;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// the order matters. We should refactor so that ContentReset does not</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// rely on mutating the flag during commit. Like by setting a flag</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// during the render phase instead.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 处理 ContentReset 副作用（重置文本内容）</span></span>
<span class="line highlighted"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (finishedWork.flags </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> ContentReset) {</span></span>
<span class="line highlighted"><span style="color:#24292E;">          </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">instance</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Instance</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> finishedWork.stateNode;</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 重置文本内容</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">resetTextContent</span><span style="color:#24292E;">(instance);</span></span>
<span class="line"><span style="color:#24292E;">          } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (error) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">captureCommitPhaseError</span><span style="color:#24292E;">(finishedWork, finishedWork.return, error);</span></span>
<span class="line"><span style="color:#24292E;">          }</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 处理 Update 副作用（更新 DOM 节点）</span></span>
<span class="line highlighted"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (flags </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> Update) {</span></span>
<span class="line highlighted"><span style="color:#24292E;">          </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">instance</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Instance</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> finishedWork.stateNode;</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (instance </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// Commit the work prepared earlier.</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">newProps</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> finishedWork.memoizedProps;</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// For hydration we reuse the update path but we treat the oldProps</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// as the newProps. The updatePayload will contain the real change in</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// this case.</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">oldProps</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span></span>
<span class="line"><span style="color:#24292E;">              current </span><span style="color:#D73A49;">!==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> current.memoizedProps </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> newProps;</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">type</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> finishedWork.type;</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// TODO: Type the updateQueue to be specific to host components.</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">updatePayload</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">UpdatePayload</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (finishedWork.updateQueue: any);</span></span>
<span class="line"><span style="color:#24292E;">            finishedWork.updateQueue </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (updatePayload </span><span style="color:#D73A49;">!==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">              </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">// 更新 DOM 节点</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6F42C1;">commitUpdate</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">                  instance,</span></span>
<span class="line"><span style="color:#24292E;">                  updatePayload,</span></span>
<span class="line"><span style="color:#24292E;">                  type,</span></span>
<span class="line"><span style="color:#24292E;">                  oldProps,</span></span>
<span class="line"><span style="color:#24292E;">                  newProps,</span></span>
<span class="line"><span style="color:#24292E;">                  finishedWork,</span></span>
<span class="line"><span style="color:#24292E;">                );</span></span>
<span class="line"><span style="color:#24292E;">              } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (error) {</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6F42C1;">captureCommitPhaseError</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">                  finishedWork,</span></span>
<span class="line"><span style="color:#24292E;">                  finishedWork.return,</span></span>
<span class="line"><span style="color:#24292E;">                  error,</span></span>
<span class="line"><span style="color:#24292E;">                );</span></span>
<span class="line"><span style="color:#24292E;">              }</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">          }</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> HostText: {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">recursivelyTraverseMutationEffects</span><span style="color:#24292E;">(root, finishedWork, lanes);</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">commitReconciliationEffects</span><span style="color:#24292E;">(finishedWork);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// 处理 Update 副作用（更新文本节点）</span></span>
<span class="line highlighted"><span style="color:#24292E;">      </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (flags </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> Update) {</span></span>
<span class="line highlighted"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (supportsMutation) {</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (finishedWork.stateNode </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Error</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">              </span><span style="color:#032F62;">&#39;This should have a text node initialized. This error is likely &#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#032F62;">&#39;caused by a bug in React. Please file an issue.&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">            );</span></span>
<span class="line"><span style="color:#24292E;">          }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">textInstance</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TextInstance</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> finishedWork.stateNode;</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">newText</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> finishedWork.memoizedProps;</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#6A737D;">// For hydration we reuse the update path but we treat the oldProps</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#6A737D;">// as the newProps. The updatePayload will contain the real change in</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#6A737D;">// this case.</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">oldText</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span></span>
<span class="line"><span style="color:#24292E;">            current </span><span style="color:#D73A49;">!==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> current.memoizedProps </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> newText;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 更新文本节点</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">commitTextUpdate</span><span style="color:#24292E;">(textInstance, oldText, newText);</span></span>
<span class="line"><span style="color:#24292E;">          } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (error) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">captureCommitPhaseError</span><span style="color:#24292E;">(finishedWork, finishedWork.return, error);</span></span>
<span class="line"><span style="color:#24292E;">          }</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> HostRoot:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> HostPortal:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> SuspenseComponent:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> OffscreenComponent:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> SuspenseListComponent:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> ScopeComponent:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">default</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">recursivelyTraverseMutationEffects</span><span style="color:#24292E;">(root, finishedWork, lanes);</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">commitReconciliationEffects</span><span style="color:#24292E;">(finishedWork);</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br><span class="line-number">82</span><br><span class="line-number">83</span><br><span class="line-number">84</span><br><span class="line-number">85</span><br><span class="line-number">86</span><br><span class="line-number">87</span><br><span class="line-number">88</span><br><span class="line-number">89</span><br><span class="line-number">90</span><br><span class="line-number">91</span><br><span class="line-number">92</span><br><span class="line-number">93</span><br><span class="line-number">94</span><br><span class="line-number">95</span><br><span class="line-number">96</span><br><span class="line-number">97</span><br><span class="line-number">98</span><br><span class="line-number">99</span><br><span class="line-number">100</span><br><span class="line-number">101</span><br><span class="line-number">102</span><br><span class="line-number">103</span><br><span class="line-number">104</span><br><span class="line-number">105</span><br><span class="line-number">106</span><br><span class="line-number">107</span><br><span class="line-number">108</span><br><span class="line-number">109</span><br><span class="line-number">110</span><br><span class="line-number">111</span><br><span class="line-number">112</span><br><span class="line-number">113</span><br><span class="line-number">114</span><br><span class="line-number">115</span><br><span class="line-number">116</span><br><span class="line-number">117</span><br><span class="line-number">118</span><br><span class="line-number">119</span><br><span class="line-number">120</span><br><span class="line-number">121</span><br><span class="line-number">122</span><br><span class="line-number">123</span><br><span class="line-number">124</span><br><span class="line-number">125</span><br><span class="line-number">126</span><br><span class="line-number">127</span><br><span class="line-number">128</span><br><span class="line-number">129</span><br><span class="line-number">130</span><br><span class="line-number">131</span><br><span class="line-number">132</span><br><span class="line-number">133</span><br><span class="line-number">134</span><br><span class="line-number">135</span><br><span class="line-number">136</span><br><span class="line-number">137</span><br><span class="line-number">138</span><br><span class="line-number">139</span><br><span class="line-number">140</span><br><span class="line-number">141</span><br><span class="line-number">142</span><br><span class="line-number">143</span><br><span class="line-number">144</span><br><span class="line-number">145</span><br><span class="line-number">146</span><br><span class="line-number">147</span><br><span class="line-number">148</span><br><span class="line-number">149</span><br><span class="line-number">150</span><br><span class="line-number">151</span><br><span class="line-number">152</span><br><span class="line-number">153</span><br><span class="line-number">154</span><br><span class="line-number">155</span><br><span class="line-number">156</span><br><span class="line-number">157</span><br><span class="line-number">158</span><br><span class="line-number">159</span><br><span class="line-number">160</span><br><span class="line-number">161</span><br><span class="line-number">162</span><br><span class="line-number">163</span><br><span class="line-number">164</span><br><span class="line-number">165</span><br><span class="line-number">166</span><br><span class="line-number">167</span><br><span class="line-number">168</span><br><span class="line-number">169</span><br><span class="line-number">170</span><br><span class="line-number">171</span><br><span class="line-number">172</span><br><span class="line-number">173</span><br><span class="line-number">174</span><br><span class="line-number">175</span><br><span class="line-number">176</span><br><span class="line-number">177</span><br><span class="line-number">178</span><br><span class="line-number">179</span><br><span class="line-number">180</span><br><span class="line-number">181</span><br><span class="line-number">182</span><br><span class="line-number">183</span><br><span class="line-number">184</span><br><span class="line-number">185</span><br><span class="line-number">186</span><br><span class="line-number">187</span><br><span class="line-number">188</span><br><span class="line-number">189</span><br><span class="line-number">190</span><br><span class="line-number">191</span><br><span class="line-number">192</span><br><span class="line-number">193</span><br><span class="line-number">194</span><br><span class="line-number">195</span><br><span class="line-number">196</span><br><span class="line-number">197</span><br><span class="line-number">198</span><br><span class="line-number">199</span><br></div></div><h2 id="recursivelytraversemutationeffects" tabindex="-1"><code>recursivelyTraverseMutationEffects</code> <a class="header-anchor" href="#recursivelytraversemutationeffects" aria-label="Permalink to &quot;\`recursivelyTraverseMutationEffects\`&quot;">​</a></h2><p><code>recursivelyTraverseMutationEffects</code> 函数递归遍历子 Fiber 树，并做如下操作：</p><ul><li>调用 <code>commitDeletionEffects</code> 函数处理 <strong>Deletion</strong> 副作用（删除）</li><li>调用 <code>commitMutationEffectsOnFiber</code> 函数处理 <strong>Mutation</strong> 副作用（插入、更新、删除、Ref 等）</li></ul><blockquote><p>源码地址 <a href="https://github.com/maomao1996/code-analysis/blob/9a3aa89acc830353e3795276b0eda4e96e840975/react-v18.2.0/src/react/packages/react-reconciler/src/ReactFiberCommitWork.old.js#L2052" target="_blank" rel="noreferrer">recursivelyTraverseMutationEffects() | react-reconciler/src/ReactFiberCommitWork.old.js</a></p></blockquote><div class="language-ts vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark has-highlighted-lines vp-code-dark"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">recursivelyTraverseMutationEffects</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">root</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">FiberRoot</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">parentFiber</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Fiber</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">lanes</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Lanes</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// Deletions effects can be scheduled on any fiber type. They need to happen</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// before the children effects hae fired.</span></span>
<span class="line highlighted"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 处理 Deletion 副作用（即 ChildDeletion）</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">deletions</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> parentFiber.deletions</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (deletions </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> deletions.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;">; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">childToDelete</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> deletions[i]</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line highlighted"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">commitDeletionEffects</span><span style="color:#E1E4E8;">(root, parentFiber, childToDelete)</span></span>
<span class="line"><span style="color:#E1E4E8;">      } </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (error) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">captureCommitPhaseError</span><span style="color:#E1E4E8;">(childToDelete, parentFiber, error)</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line highlighted"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 处理 Mutation 副作用（即 Placement | Update | ChildDeletion | ContentReset | Ref | Hydrating | Visibility）</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (parentFiber.subtreeFlags </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> MutationMask) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> child </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> parentFiber.child</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;"> (child </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line highlighted"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">commitMutationEffectsOnFiber</span><span style="color:#E1E4E8;">(child, root, lanes)</span></span>
<span class="line"><span style="color:#E1E4E8;">      child </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> child.sibling</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light has-highlighted-lines vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">recursivelyTraverseMutationEffects</span><span style="color:#24292E;">(</span><span style="color:#E36209;">root</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">FiberRoot</span><span style="color:#24292E;">, </span><span style="color:#E36209;">parentFiber</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Fiber</span><span style="color:#24292E;">, </span><span style="color:#E36209;">lanes</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Lanes</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// Deletions effects can be scheduled on any fiber type. They need to happen</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// before the children effects hae fired.</span></span>
<span class="line highlighted"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 处理 Deletion 副作用（即 ChildDeletion）</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">deletions</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> parentFiber.deletions</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (deletions </span><span style="color:#D73A49;">!==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> deletions.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;">; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">childToDelete</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> deletions[i]</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line highlighted"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">commitDeletionEffects</span><span style="color:#24292E;">(root, parentFiber, childToDelete)</span></span>
<span class="line"><span style="color:#24292E;">      } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (error) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">captureCommitPhaseError</span><span style="color:#24292E;">(childToDelete, parentFiber, error)</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"></span>
<span class="line highlighted"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 处理 Mutation 副作用（即 Placement | Update | ChildDeletion | ContentReset | Ref | Hydrating | Visibility）</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (parentFiber.subtreeFlags </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> MutationMask) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> child </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> parentFiber.child</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (child </span><span style="color:#D73A49;">!==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line highlighted"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">commitMutationEffectsOnFiber</span><span style="color:#24292E;">(child, root, lanes)</span></span>
<span class="line"><span style="color:#24292E;">      child </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> child.sibling</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div><h3 id="commitdeletioneffects" tabindex="-1"><code>commitDeletionEffects</code> <a class="header-anchor" href="#commitdeletioneffects" aria-label="Permalink to &quot;\`commitDeletionEffects\`&quot;">​</a></h3><blockquote><p>源码地址 <a href="https://github.com/maomao1996/code-analysis/blob/9a3aa89acc830353e3795276b0eda4e96e840975/react-v18.2.0/src/react/packages/react-reconciler/src/ReactFiberCommitWork.old.js#L1608" target="_blank" rel="noreferrer">commitDeletionEffects() | react-reconciler/src/ReactFiberCommitWork.old.js</a></p></blockquote><div class="language-ts vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark has-highlighted-lines vp-code-dark"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">commitDeletionEffects</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">root</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">FiberRoot</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">returnFiber</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Fiber</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">deletedFiber</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Fiber</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (supportsMutation) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// We only have the top Fiber that was deleted but we need to recurse down its</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// children to find all the terminal nodes.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// Recursively delete all host nodes from the parent, detach refs, clean</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// up mounted layout effects, and call componentWillUnmount.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// We only need to remove the topmost host child in each branch. But then we</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// still need to keep traversing to unmount effects, refs, and cWU. TODO: We</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// could split this into two separate traversals functions, where the second</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// one doesn&#39;t include any removeChild logic. This is maybe the same</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// function as &quot;disappearLayoutEffects&quot; (or whatever that turns into after</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// the layout phase is refactored to use recursion).</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// Before starting, find the nearest host parent on the stack so we know</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// which instance/container to remove the children from.</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// TODO: Instead of searching up the fiber return path on every deletion, we</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// can track the nearest host component on the JS stack as we traverse the</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// tree during the commit phase. This would make insertions faster, too.</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> parent </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> returnFiber</span></span>
<span class="line highlighted"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 标记父节点是否为容器</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">findParent</span><span style="color:#E1E4E8;">: </span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;"> (parent </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">switch</span><span style="color:#E1E4E8;"> (parent.tag) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> HostComponent: {</span></span>
<span class="line"><span style="color:#E1E4E8;">          hostParent </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> parent.stateNode</span></span>
<span class="line"><span style="color:#E1E4E8;">          hostParentIsContainer </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#F97583;">break</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">findParent</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> HostRoot: {</span></span>
<span class="line"><span style="color:#E1E4E8;">          hostParent </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> parent.stateNode.containerInfo</span></span>
<span class="line"><span style="color:#E1E4E8;">          hostParentIsContainer </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#F97583;">break</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">findParent</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> HostPortal: {</span></span>
<span class="line"><span style="color:#E1E4E8;">          hostParent </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> parent.stateNode.containerInfo</span></span>
<span class="line"><span style="color:#E1E4E8;">          hostParentIsContainer </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#F97583;">break</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">findParent</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">      parent </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> parent.return</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (hostParent </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Error</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&#39;Expected to find a host parent. This error is likely caused by &#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#9ECBFF;">&#39;a bug in React. Please file an issue.&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">      )</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line highlighted"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">commitDeletionEffectsOnFiber</span><span style="color:#E1E4E8;">(root, returnFiber, deletedFiber)</span></span>
<span class="line"><span style="color:#E1E4E8;">    hostParent </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span></span>
<span class="line"><span style="color:#E1E4E8;">    hostParentIsContainer </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span></span>
<span class="line"><span style="color:#E1E4E8;">  } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// Detach refs and call componentWillUnmount() on the whole subtree.</span></span>
<span class="line highlighted"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">commitDeletionEffectsOnFiber</span><span style="color:#E1E4E8;">(root, returnFiber, deletedFiber)</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">detachFiberMutation</span><span style="color:#E1E4E8;">(deletedFiber)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light has-highlighted-lines vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">commitDeletionEffects</span><span style="color:#24292E;">(</span><span style="color:#E36209;">root</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">FiberRoot</span><span style="color:#24292E;">, </span><span style="color:#E36209;">returnFiber</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Fiber</span><span style="color:#24292E;">, </span><span style="color:#E36209;">deletedFiber</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Fiber</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (supportsMutation) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// We only have the top Fiber that was deleted but we need to recurse down its</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// children to find all the terminal nodes.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// Recursively delete all host nodes from the parent, detach refs, clean</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// up mounted layout effects, and call componentWillUnmount.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// We only need to remove the topmost host child in each branch. But then we</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// still need to keep traversing to unmount effects, refs, and cWU. TODO: We</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// could split this into two separate traversals functions, where the second</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// one doesn&#39;t include any removeChild logic. This is maybe the same</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// function as &quot;disappearLayoutEffects&quot; (or whatever that turns into after</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// the layout phase is refactored to use recursion).</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// Before starting, find the nearest host parent on the stack so we know</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// which instance/container to remove the children from.</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// TODO: Instead of searching up the fiber return path on every deletion, we</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// can track the nearest host component on the JS stack as we traverse the</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// tree during the commit phase. This would make insertions faster, too.</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> parent </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> returnFiber</span></span>
<span class="line highlighted"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 标记父节点是否为容器</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">findParent</span><span style="color:#24292E;">: </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (parent </span><span style="color:#D73A49;">!==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">switch</span><span style="color:#24292E;"> (parent.tag) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> HostComponent: {</span></span>
<span class="line"><span style="color:#24292E;">          hostParent </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> parent.stateNode</span></span>
<span class="line"><span style="color:#24292E;">          hostParentIsContainer </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#D73A49;">break</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">findParent</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> HostRoot: {</span></span>
<span class="line"><span style="color:#24292E;">          hostParent </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> parent.stateNode.containerInfo</span></span>
<span class="line"><span style="color:#24292E;">          hostParentIsContainer </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#D73A49;">break</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">findParent</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> HostPortal: {</span></span>
<span class="line"><span style="color:#24292E;">          hostParent </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> parent.stateNode.containerInfo</span></span>
<span class="line"><span style="color:#24292E;">          hostParentIsContainer </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#D73A49;">break</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">findParent</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">      parent </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> parent.return</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (hostParent </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Error</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&#39;Expected to find a host parent. This error is likely caused by &#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#032F62;">&#39;a bug in React. Please file an issue.&#39;</span></span>
<span class="line"><span style="color:#24292E;">      )</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line highlighted"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">commitDeletionEffectsOnFiber</span><span style="color:#24292E;">(root, returnFiber, deletedFiber)</span></span>
<span class="line"><span style="color:#24292E;">    hostParent </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span></span>
<span class="line"><span style="color:#24292E;">    hostParentIsContainer </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span></span>
<span class="line"><span style="color:#24292E;">  } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// Detach refs and call componentWillUnmount() on the whole subtree.</span></span>
<span class="line highlighted"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">commitDeletionEffectsOnFiber</span><span style="color:#24292E;">(root, returnFiber, deletedFiber)</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">detachFiberMutation</span><span style="color:#24292E;">(deletedFiber)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br></div></div><h3 id="commitdeletioneffectsonfiber" tabindex="-1"><code>commitDeletionEffectsOnFiber</code> <a class="header-anchor" href="#commitdeletioneffectsonfiber" aria-label="Permalink to &quot;\`commitDeletionEffectsOnFiber\`&quot;">​</a></h3><blockquote><p>源码地址 <a href="https://github.com/maomao1996/code-analysis/blob/9a3aa89acc830353e3795276b0eda4e96e840975/react-v18.2.0/src/react/packages/react-reconciler/src/ReactFiberCommitWork.old.js#L1683" target="_blank" rel="noreferrer">commitDeletionEffectsOnFiber() | react-reconciler/src/ReactFiberCommitWork.old.js</a></p></blockquote><div class="language-ts vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark has-highlighted-lines vp-code-dark"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">commitDeletionEffectsOnFiber</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FFAB70;">finishedRoot</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">FiberRoot</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FFAB70;">nearestMountedAncestor</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Fiber</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FFAB70;">deletedFiber</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Fiber</span></span>
<span class="line"><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// The cases in this outer switch modify the stack before they traverse</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// into their subtree. There are simpler cases in the inner switch</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// that don&#39;t modify the stack.</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">switch</span><span style="color:#E1E4E8;"> (deletedFiber.tag) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> HostComponent: {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">offscreenSubtreeWasHidden) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">safelyDetachRef</span><span style="color:#E1E4E8;">(deletedFiber, nearestMountedAncestor)</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// Intentional fallthrough to next branch</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// eslint-disable-next-line-no-fallthrough</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> HostText: {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// We only need to remove the nearest host child. Set the host parent</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// to \`null\` on the stack to indicate that nested children don&#39;t</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// need to be removed.</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (supportsMutation) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">prevHostParent</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> hostParent</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">prevHostParentIsContainer</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> hostParentIsContainer</span></span>
<span class="line"><span style="color:#E1E4E8;">        hostParent </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span></span>
<span class="line highlighted"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 继续递归遍历执行 recursivelyTraverseDeletionEffects() 函数</span></span>
<span class="line highlighted"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">recursivelyTraverseDeletionEffects</span><span style="color:#E1E4E8;">(finishedRoot, nearestMountedAncestor, deletedFiber)</span></span>
<span class="line"><span style="color:#E1E4E8;">        hostParent </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> prevHostParent</span></span>
<span class="line"><span style="color:#E1E4E8;">        hostParentIsContainer </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> prevHostParentIsContainer</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (hostParent </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#6A737D;">// Now that all the child effects have unmounted, we can remove the</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#6A737D;">// node from the tree.</span></span>
<span class="line highlighted"><span style="color:#E1E4E8;">          </span><span style="color:#6A737D;">// 判断是否父节点是否为容器</span></span>
<span class="line highlighted"><span style="color:#E1E4E8;">          </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (hostParentIsContainer) {</span></span>
<span class="line highlighted"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 从容器中删除子节点</span></span>
<span class="line highlighted"><span style="color:#E1E4E8;">            </span><span style="color:#B392F0;">removeChildFromContainer</span><span style="color:#E1E4E8;">(hostParent, deletedFiber.stateNode)</span></span>
<span class="line highlighted"><span style="color:#E1E4E8;">          } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line highlighted"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 直接删除子节点</span></span>
<span class="line highlighted"><span style="color:#E1E4E8;">            </span><span style="color:#B392F0;">removeChild</span><span style="color:#E1E4E8;">(hostParent, deletedFiber.stateNode)</span></span>
<span class="line highlighted"><span style="color:#E1E4E8;">          }</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">      } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line highlighted"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 继续递归遍历执行 commitDeletionEffectsOnFiber() 函数</span></span>
<span class="line highlighted"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">recursivelyTraverseDeletionEffects</span><span style="color:#E1E4E8;">(finishedRoot, nearestMountedAncestor, deletedFiber)</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// ... 省略以下 case 的处理逻辑</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> DehydratedFragment:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> HostPortal:</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 函数组件</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> FunctionComponent:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> ForwardRef:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> MemoComponent:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> SimpleMemoComponent: {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">offscreenSubtreeWasHidden) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">updateQueue</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">FunctionComponentUpdateQueue</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> deletedFiber.updateQueue</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (updateQueue </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">lastEffect</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> updateQueue.lastEffect</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (lastEffect </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">firstEffect</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> lastEffect.next</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> effect </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> firstEffect</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">do</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">              </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> { </span><span style="color:#79B8FF;">destroy</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">tag</span><span style="color:#E1E4E8;"> } </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> effect</span></span>
<span class="line"><span style="color:#E1E4E8;">              </span><span style="color:#6A737D;">// 判断是否存在 destroy 函数</span></span>
<span class="line"><span style="color:#E1E4E8;">              </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (destroy </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">undefined</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> ((tag </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> HookInsertion) </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> NoHookEffect) {</span></span>
<span class="line highlighted"><span style="color:#E1E4E8;">                  </span><span style="color:#6A737D;">// 执行组件的 useEffect 卸载函数</span></span>
<span class="line highlighted"><span style="color:#E1E4E8;">                  </span><span style="color:#B392F0;">safelyCallDestroy</span><span style="color:#E1E4E8;">(deletedFiber, nearestMountedAncestor, destroy)</span></span>
<span class="line"><span style="color:#E1E4E8;">                } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> ((tag </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> HookLayout) </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> NoHookEffect) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (enableSchedulingProfiler) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#B392F0;">markComponentLayoutEffectUnmountStarted</span><span style="color:#E1E4E8;">(deletedFiber)</span></span>
<span class="line"><span style="color:#E1E4E8;">                  }</span></span>
<span class="line"></span>
<span class="line highlighted"><span style="color:#E1E4E8;">                  </span><span style="color:#6A737D;">// 执行组件的 useLayoutEffect 卸载函数</span></span>
<span class="line"><span style="color:#E1E4E8;">                  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span></span>
<span class="line"><span style="color:#E1E4E8;">                    enableProfilerTimer </span><span style="color:#F97583;">&amp;&amp;</span></span>
<span class="line"><span style="color:#E1E4E8;">                    enableProfilerCommitHooks </span><span style="color:#F97583;">&amp;&amp;</span></span>
<span class="line"><span style="color:#E1E4E8;">                    deletedFiber.mode </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> ProfileMode</span></span>
<span class="line"><span style="color:#E1E4E8;">                  ) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#B392F0;">startLayoutEffectTimer</span><span style="color:#E1E4E8;">()</span></span>
<span class="line highlighted"><span style="color:#E1E4E8;">                    </span><span style="color:#B392F0;">safelyCallDestroy</span><span style="color:#E1E4E8;">(deletedFiber, nearestMountedAncestor, destroy)</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#B392F0;">recordLayoutEffectDuration</span><span style="color:#E1E4E8;">(deletedFiber)</span></span>
<span class="line"><span style="color:#E1E4E8;">                  } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line highlighted"><span style="color:#E1E4E8;">                    </span><span style="color:#B392F0;">safelyCallDestroy</span><span style="color:#E1E4E8;">(deletedFiber, nearestMountedAncestor, destroy)</span></span>
<span class="line"><span style="color:#E1E4E8;">                  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">                  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (enableSchedulingProfiler) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#B392F0;">markComponentLayoutEffectUnmountStopped</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">                  }</span></span>
<span class="line"><span style="color:#E1E4E8;">                }</span></span>
<span class="line"><span style="color:#E1E4E8;">              }</span></span>
<span class="line"><span style="color:#E1E4E8;">              effect </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> effect.next</span></span>
<span class="line"><span style="color:#E1E4E8;">            } </span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;"> (effect </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> firstEffect)</span></span>
<span class="line"><span style="color:#E1E4E8;">          }</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"></span>
<span class="line highlighted"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// 继续递归遍历执行 commitDeletionEffectsOnFiber() 函数</span></span>
<span class="line highlighted"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">recursivelyTraverseDeletionEffects</span><span style="color:#E1E4E8;">(finishedRoot, nearestMountedAncestor, deletedFiber)</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 类组件</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> ClassComponent: {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">offscreenSubtreeWasHidden) {</span></span>
<span class="line highlighted"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 卸载 Ref</span></span>
<span class="line highlighted"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">safelyDetachRef</span><span style="color:#E1E4E8;">(deletedFiber, nearestMountedAncestor)</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">instance</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> deletedFiber.stateNode</span></span>
<span class="line highlighted"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 执行类组件的 componentWillUnmount 生命周期函数</span></span>
<span class="line highlighted"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">typeof</span><span style="color:#E1E4E8;"> instance.componentWillUnmount </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;function&#39;</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line highlighted"><span style="color:#E1E4E8;">          </span><span style="color:#B392F0;">safelyCallComponentWillUnmount</span><span style="color:#E1E4E8;">(deletedFiber, nearestMountedAncestor, instance)</span></span>
<span class="line highlighted"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">recursivelyTraverseDeletionEffects</span><span style="color:#E1E4E8;">(finishedRoot, nearestMountedAncestor, deletedFiber)</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// ... 省略以下 case 的处理逻辑</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> ScopeComponent:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> OffscreenComponent:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;">: {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">recursivelyTraverseDeletionEffects</span><span style="color:#E1E4E8;">(finishedRoot, nearestMountedAncestor, deletedFiber)</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light has-highlighted-lines vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">commitDeletionEffectsOnFiber</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">finishedRoot</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">FiberRoot</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">nearestMountedAncestor</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Fiber</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">deletedFiber</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Fiber</span></span>
<span class="line"><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// The cases in this outer switch modify the stack before they traverse</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// into their subtree. There are simpler cases in the inner switch</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// that don&#39;t modify the stack.</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">switch</span><span style="color:#24292E;"> (deletedFiber.tag) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> HostComponent: {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">offscreenSubtreeWasHidden) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">safelyDetachRef</span><span style="color:#24292E;">(deletedFiber, nearestMountedAncestor)</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// Intentional fallthrough to next branch</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// eslint-disable-next-line-no-fallthrough</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> HostText: {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// We only need to remove the nearest host child. Set the host parent</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// to \`null\` on the stack to indicate that nested children don&#39;t</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// need to be removed.</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (supportsMutation) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">prevHostParent</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> hostParent</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">prevHostParentIsContainer</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> hostParentIsContainer</span></span>
<span class="line"><span style="color:#24292E;">        hostParent </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span></span>
<span class="line highlighted"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 继续递归遍历执行 recursivelyTraverseDeletionEffects() 函数</span></span>
<span class="line highlighted"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">recursivelyTraverseDeletionEffects</span><span style="color:#24292E;">(finishedRoot, nearestMountedAncestor, deletedFiber)</span></span>
<span class="line"><span style="color:#24292E;">        hostParent </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> prevHostParent</span></span>
<span class="line"><span style="color:#24292E;">        hostParentIsContainer </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> prevHostParentIsContainer</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (hostParent </span><span style="color:#D73A49;">!==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#6A737D;">// Now that all the child effects have unmounted, we can remove the</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#6A737D;">// node from the tree.</span></span>
<span class="line highlighted"><span style="color:#24292E;">          </span><span style="color:#6A737D;">// 判断是否父节点是否为容器</span></span>
<span class="line highlighted"><span style="color:#24292E;">          </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (hostParentIsContainer) {</span></span>
<span class="line highlighted"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 从容器中删除子节点</span></span>
<span class="line highlighted"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">removeChildFromContainer</span><span style="color:#24292E;">(hostParent, deletedFiber.stateNode)</span></span>
<span class="line highlighted"><span style="color:#24292E;">          } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line highlighted"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 直接删除子节点</span></span>
<span class="line highlighted"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">removeChild</span><span style="color:#24292E;">(hostParent, deletedFiber.stateNode)</span></span>
<span class="line highlighted"><span style="color:#24292E;">          }</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">      } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line highlighted"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 继续递归遍历执行 commitDeletionEffectsOnFiber() 函数</span></span>
<span class="line highlighted"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">recursivelyTraverseDeletionEffects</span><span style="color:#24292E;">(finishedRoot, nearestMountedAncestor, deletedFiber)</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// ... 省略以下 case 的处理逻辑</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> DehydratedFragment:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> HostPortal:</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 函数组件</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> FunctionComponent:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> ForwardRef:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> MemoComponent:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> SimpleMemoComponent: {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">offscreenSubtreeWasHidden) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">updateQueue</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">FunctionComponentUpdateQueue</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> deletedFiber.updateQueue</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (updateQueue </span><span style="color:#D73A49;">!==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">lastEffect</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> updateQueue.lastEffect</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (lastEffect </span><span style="color:#D73A49;">!==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">firstEffect</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> lastEffect.next</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> effect </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> firstEffect</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">do</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">              </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> { </span><span style="color:#005CC5;">destroy</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">tag</span><span style="color:#24292E;"> } </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> effect</span></span>
<span class="line"><span style="color:#24292E;">              </span><span style="color:#6A737D;">// 判断是否存在 destroy 函数</span></span>
<span class="line"><span style="color:#24292E;">              </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (destroy </span><span style="color:#D73A49;">!==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">undefined</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> ((tag </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> HookInsertion) </span><span style="color:#D73A49;">!==</span><span style="color:#24292E;"> NoHookEffect) {</span></span>
<span class="line highlighted"><span style="color:#24292E;">                  </span><span style="color:#6A737D;">// 执行组件的 useEffect 卸载函数</span></span>
<span class="line highlighted"><span style="color:#24292E;">                  </span><span style="color:#6F42C1;">safelyCallDestroy</span><span style="color:#24292E;">(deletedFiber, nearestMountedAncestor, destroy)</span></span>
<span class="line"><span style="color:#24292E;">                } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> ((tag </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> HookLayout) </span><span style="color:#D73A49;">!==</span><span style="color:#24292E;"> NoHookEffect) {</span></span>
<span class="line"><span style="color:#24292E;">                  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (enableSchedulingProfiler) {</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#6F42C1;">markComponentLayoutEffectUnmountStarted</span><span style="color:#24292E;">(deletedFiber)</span></span>
<span class="line"><span style="color:#24292E;">                  }</span></span>
<span class="line"></span>
<span class="line highlighted"><span style="color:#24292E;">                  </span><span style="color:#6A737D;">// 执行组件的 useLayoutEffect 卸载函数</span></span>
<span class="line"><span style="color:#24292E;">                  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span></span>
<span class="line"><span style="color:#24292E;">                    enableProfilerTimer </span><span style="color:#D73A49;">&amp;&amp;</span></span>
<span class="line"><span style="color:#24292E;">                    enableProfilerCommitHooks </span><span style="color:#D73A49;">&amp;&amp;</span></span>
<span class="line"><span style="color:#24292E;">                    deletedFiber.mode </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> ProfileMode</span></span>
<span class="line"><span style="color:#24292E;">                  ) {</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#6F42C1;">startLayoutEffectTimer</span><span style="color:#24292E;">()</span></span>
<span class="line highlighted"><span style="color:#24292E;">                    </span><span style="color:#6F42C1;">safelyCallDestroy</span><span style="color:#24292E;">(deletedFiber, nearestMountedAncestor, destroy)</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#6F42C1;">recordLayoutEffectDuration</span><span style="color:#24292E;">(deletedFiber)</span></span>
<span class="line"><span style="color:#24292E;">                  } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line highlighted"><span style="color:#24292E;">                    </span><span style="color:#6F42C1;">safelyCallDestroy</span><span style="color:#24292E;">(deletedFiber, nearestMountedAncestor, destroy)</span></span>
<span class="line"><span style="color:#24292E;">                  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">                  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (enableSchedulingProfiler) {</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#6F42C1;">markComponentLayoutEffectUnmountStopped</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">                  }</span></span>
<span class="line"><span style="color:#24292E;">                }</span></span>
<span class="line"><span style="color:#24292E;">              }</span></span>
<span class="line"><span style="color:#24292E;">              effect </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> effect.next</span></span>
<span class="line"><span style="color:#24292E;">            } </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (effect </span><span style="color:#D73A49;">!==</span><span style="color:#24292E;"> firstEffect)</span></span>
<span class="line"><span style="color:#24292E;">          }</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"></span>
<span class="line highlighted"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// 继续递归遍历执行 commitDeletionEffectsOnFiber() 函数</span></span>
<span class="line highlighted"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">recursivelyTraverseDeletionEffects</span><span style="color:#24292E;">(finishedRoot, nearestMountedAncestor, deletedFiber)</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 类组件</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> ClassComponent: {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">offscreenSubtreeWasHidden) {</span></span>
<span class="line highlighted"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 卸载 Ref</span></span>
<span class="line highlighted"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">safelyDetachRef</span><span style="color:#24292E;">(deletedFiber, nearestMountedAncestor)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">instance</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> deletedFiber.stateNode</span></span>
<span class="line highlighted"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 执行类组件的 componentWillUnmount 生命周期函数</span></span>
<span class="line highlighted"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">typeof</span><span style="color:#24292E;"> instance.componentWillUnmount </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;function&#39;</span><span style="color:#24292E;">) {</span></span>
<span class="line highlighted"><span style="color:#24292E;">          </span><span style="color:#6F42C1;">safelyCallComponentWillUnmount</span><span style="color:#24292E;">(deletedFiber, nearestMountedAncestor, instance)</span></span>
<span class="line highlighted"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">recursivelyTraverseDeletionEffects</span><span style="color:#24292E;">(finishedRoot, nearestMountedAncestor, deletedFiber)</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// ... 省略以下 case 的处理逻辑</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> ScopeComponent:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> OffscreenComponent:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">default</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">recursivelyTraverseDeletionEffects</span><span style="color:#24292E;">(finishedRoot, nearestMountedAncestor, deletedFiber)</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br><span class="line-number">82</span><br><span class="line-number">83</span><br><span class="line-number">84</span><br><span class="line-number">85</span><br><span class="line-number">86</span><br><span class="line-number">87</span><br><span class="line-number">88</span><br><span class="line-number">89</span><br><span class="line-number">90</span><br><span class="line-number">91</span><br><span class="line-number">92</span><br><span class="line-number">93</span><br><span class="line-number">94</span><br><span class="line-number">95</span><br><span class="line-number">96</span><br><span class="line-number">97</span><br><span class="line-number">98</span><br><span class="line-number">99</span><br><span class="line-number">100</span><br><span class="line-number">101</span><br><span class="line-number">102</span><br><span class="line-number">103</span><br><span class="line-number">104</span><br><span class="line-number">105</span><br><span class="line-number">106</span><br><span class="line-number">107</span><br><span class="line-number">108</span><br><span class="line-number">109</span><br><span class="line-number">110</span><br><span class="line-number">111</span><br><span class="line-number">112</span><br><span class="line-number">113</span><br><span class="line-number">114</span><br><span class="line-number">115</span><br><span class="line-number">116</span><br><span class="line-number">117</span><br><span class="line-number">118</span><br><span class="line-number">119</span><br><span class="line-number">120</span><br><span class="line-number">121</span><br><span class="line-number">122</span><br><span class="line-number">123</span><br><span class="line-number">124</span><br><span class="line-number">125</span><br><span class="line-number">126</span><br><span class="line-number">127</span><br><span class="line-number">128</span><br><span class="line-number">129</span><br></div></div><h3 id="recursivelytraversedeletioneffects" tabindex="-1"><code>recursivelyTraverseDeletionEffects</code> <a class="header-anchor" href="#recursivelytraversedeletioneffects" aria-label="Permalink to &quot;\`recursivelyTraverseDeletionEffects\`&quot;">​</a></h3><p>对子 Fiber 树进行遍历，并调用 <code>commitDeletionEffectsOnFiber</code> 函数处理 <strong>Deletion</strong> 副作用（删除）</p><blockquote><p>源码地址 <a href="https://github.com/maomao1996/code-analysis/blob/9a3aa89acc830353e3795276b0eda4e96e840975/react-v18.2.0/src/react/packages/react-reconciler/src/ReactFiberCommitWork.old.js#L1670" target="_blank" rel="noreferrer">recursivelyTraverseDeletionEffects() | react-reconciler/src/ReactFiberCommitWork.old.js</a></p></blockquote><div class="language-ts vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark has-highlighted-lines vp-code-dark"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">recursivelyTraverseDeletionEffects</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">finishedRoot</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">nearestMountedAncestor</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">parent</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> child </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> parent.child</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;"> (child </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line highlighted"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">commitDeletionEffectsOnFiber</span><span style="color:#E1E4E8;">(finishedRoot, nearestMountedAncestor, child)</span></span>
<span class="line"><span style="color:#E1E4E8;">    child </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> child.sibling</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light has-highlighted-lines vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">recursivelyTraverseDeletionEffects</span><span style="color:#24292E;">(</span><span style="color:#E36209;">finishedRoot</span><span style="color:#24292E;">, </span><span style="color:#E36209;">nearestMountedAncestor</span><span style="color:#24292E;">, </span><span style="color:#E36209;">parent</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> child </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> parent.child</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (child </span><span style="color:#D73A49;">!==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line highlighted"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">commitDeletionEffectsOnFiber</span><span style="color:#24292E;">(finishedRoot, nearestMountedAncestor, child)</span></span>
<span class="line"><span style="color:#24292E;">    child </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> child.sibling</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h2 id="commitreconciliationeffects" tabindex="-1"><code>commitReconciliationEffects</code> <a class="header-anchor" href="#commitreconciliationeffects" aria-label="Permalink to &quot;\`commitReconciliationEffects\`&quot;">​</a></h2><p><code>commitReconciliationEffects</code> 函数用于处理 <strong>Placement</strong> 副作用（插入）</p><blockquote><p>源码地址 <a href="https://github.com/maomao1996/code-analysis/blob/9a3aa89acc830353e3795276b0eda4e96e840975/react-v18.2.0/src/react/packages/react-reconciler/src/ReactFiberCommitWork.old.js#L2437" target="_blank" rel="noreferrer">commitReconciliationEffects() | react-reconciler/src/ReactFiberCommitWork.old.js</a></p></blockquote><div class="language-ts vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark has-highlighted-lines vp-code-dark"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">commitReconciliationEffects</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">finishedWork</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Fiber</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// Placement effects (insertions, reorders) can be scheduled on any fiber</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// type. They needs to happen after the children effects have fired, but</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// before the effects on this fiber have fired.</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">flags</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> finishedWork.flags</span></span>
<span class="line highlighted"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 判断是否存在 Placement 副作用</span></span>
<span class="line highlighted"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (flags </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> Placement) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line highlighted"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">commitPlacement</span><span style="color:#E1E4E8;">(finishedWork)</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (error) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">captureCommitPhaseError</span><span style="color:#E1E4E8;">(finishedWork, finishedWork.return, error)</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// Clear the &quot;placement&quot; from effect tag so that we know that this is</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// inserted, before any life-cycles like componentDidMount gets called.</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// TODO: findDOMNode doesn&#39;t rely on this any more but isMounted does</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// and isMounted is deprecated anyway so we should be able to kill this.</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 去除 flags 中 Placement 的标记</span></span>
<span class="line"><span style="color:#E1E4E8;">    finishedWork.flags </span><span style="color:#F97583;">&amp;=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">~</span><span style="color:#E1E4E8;">Placement</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (flags </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> Hydrating) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    finishedWork.flags </span><span style="color:#F97583;">&amp;=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">~</span><span style="color:#E1E4E8;">Hydrating</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light has-highlighted-lines vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">commitReconciliationEffects</span><span style="color:#24292E;">(</span><span style="color:#E36209;">finishedWork</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Fiber</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// Placement effects (insertions, reorders) can be scheduled on any fiber</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// type. They needs to happen after the children effects have fired, but</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// before the effects on this fiber have fired.</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">flags</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> finishedWork.flags</span></span>
<span class="line highlighted"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 判断是否存在 Placement 副作用</span></span>
<span class="line highlighted"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (flags </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> Placement) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line highlighted"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">commitPlacement</span><span style="color:#24292E;">(finishedWork)</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (error) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">captureCommitPhaseError</span><span style="color:#24292E;">(finishedWork, finishedWork.return, error)</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// Clear the &quot;placement&quot; from effect tag so that we know that this is</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// inserted, before any life-cycles like componentDidMount gets called.</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// TODO: findDOMNode doesn&#39;t rely on this any more but isMounted does</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// and isMounted is deprecated anyway so we should be able to kill this.</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 去除 flags 中 Placement 的标记</span></span>
<span class="line"><span style="color:#24292E;">    finishedWork.flags </span><span style="color:#D73A49;">&amp;=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">~</span><span style="color:#24292E;">Placement</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (flags </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> Hydrating) {</span></span>
<span class="line"><span style="color:#24292E;">    finishedWork.flags </span><span style="color:#D73A49;">&amp;=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">~</span><span style="color:#24292E;">Hydrating</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><h3 id="commitplacement" tabindex="-1"><code>commitPlacement</code> <a class="header-anchor" href="#commitplacement" aria-label="Permalink to &quot;\`commitPlacement\`&quot;">​</a></h3><blockquote><p>源码地址 <a href="https://github.com/maomao1996/code-analysis/blob/9a3aa89acc830353e3795276b0eda4e96e840975/react-v18.2.0/src/react/packages/react-reconciler/src/ReactFiberCommitWork.old.js#L1498" target="_blank" rel="noreferrer">commitPlacement() | react-reconciler/src/ReactFiberCommitWork.old.js</a></p></blockquote><div class="language-ts vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark has-highlighted-lines vp-code-dark"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">commitPlacement</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">finishedWork</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Fiber</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">void</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">supportsMutation) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// Recursively insert all host nodes into the parent.</span></span>
<span class="line highlighted"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 获取 tag 为 HostComponent、HostRoot、HostPortal 的父节点</span></span>
<span class="line highlighted"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">parentFiber</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getHostParentFiber</span><span style="color:#E1E4E8;">(finishedWork)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// Note: these two variables *must* always be updated together.</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 判断父 Fiber 节点的 tag</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">switch</span><span style="color:#E1E4E8;"> (parentFiber.tag) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 普通 DOM 标签</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> HostComponent: {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// 获取 DOM 节点</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">parent</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Instance</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> parentFiber.stateNode</span></span>
<span class="line highlighted"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// 当 flags 中存在 ContentReset 副作用时，重置父节点的文本内容</span></span>
<span class="line highlighted"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (parentFiber.flags </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> ContentReset) {</span></span>
<span class="line highlighted"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// Reset the text content of the parent before doing any insertions</span></span>
<span class="line highlighted"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">resetTextContent</span><span style="color:#E1E4E8;">(parent)</span></span>
<span class="line highlighted"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// Clear ContentReset from the effect tag</span></span>
<span class="line highlighted"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 去除 flags 中 ContentReset 的标记</span></span>
<span class="line highlighted"><span style="color:#E1E4E8;">        parentFiber.flags </span><span style="color:#F97583;">&amp;=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">~</span><span style="color:#E1E4E8;">ContentReset</span></span>
<span class="line highlighted"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"></span>
<span class="line highlighted"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// 获取当前 Fiber 节点的 DOM 兄弟节点</span></span>
<span class="line highlighted"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">before</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getHostSibling</span><span style="color:#E1E4E8;">(finishedWork)</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// We only have the top Fiber that was inserted but we need to recurse down its</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// children to find all the terminal nodes.</span></span>
<span class="line highlighted"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// 递归插入所有的子节点</span></span>
<span class="line highlighted"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">insertOrAppendPlacementNode</span><span style="color:#E1E4E8;">(finishedWork, before, parent)</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">break</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// React 根节点</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> HostRoot:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// React Portal 节点</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> HostPortal: {</span></span>
<span class="line highlighted"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// 获取 DOM 节点</span></span>
<span class="line highlighted"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">parent</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Container</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> parentFiber.stateNode.containerInfo</span></span>
<span class="line highlighted"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// 获取当前 Fiber 节点的 DOM 兄弟节点</span></span>
<span class="line highlighted"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">before</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getHostSibling</span><span style="color:#E1E4E8;">(finishedWork)</span></span>
<span class="line highlighted"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// 递归插入所有的子节点</span></span>
<span class="line highlighted"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">insertOrAppendPlacementNodeIntoContainer</span><span style="color:#E1E4E8;">(finishedWork, before, parent)</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">break</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// eslint-disable-next-line-no-fallthrough</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Error</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&#39;Invalid host parent fiber. This error is likely caused by a bug &#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#9ECBFF;">&#39;in React. Please file an issue.&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">      )</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light has-highlighted-lines vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">commitPlacement</span><span style="color:#24292E;">(</span><span style="color:#E36209;">finishedWork</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Fiber</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">void</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">supportsMutation) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// Recursively insert all host nodes into the parent.</span></span>
<span class="line highlighted"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 获取 tag 为 HostComponent、HostRoot、HostPortal 的父节点</span></span>
<span class="line highlighted"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">parentFiber</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getHostParentFiber</span><span style="color:#24292E;">(finishedWork)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// Note: these two variables *must* always be updated together.</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 判断父 Fiber 节点的 tag</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">switch</span><span style="color:#24292E;"> (parentFiber.tag) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 普通 DOM 标签</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> HostComponent: {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// 获取 DOM 节点</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">parent</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Instance</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> parentFiber.stateNode</span></span>
<span class="line highlighted"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// 当 flags 中存在 ContentReset 副作用时，重置父节点的文本内容</span></span>
<span class="line highlighted"><span style="color:#24292E;">      </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (parentFiber.flags </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> ContentReset) {</span></span>
<span class="line highlighted"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// Reset the text content of the parent before doing any insertions</span></span>
<span class="line highlighted"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">resetTextContent</span><span style="color:#24292E;">(parent)</span></span>
<span class="line highlighted"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// Clear ContentReset from the effect tag</span></span>
<span class="line highlighted"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 去除 flags 中 ContentReset 的标记</span></span>
<span class="line highlighted"><span style="color:#24292E;">        parentFiber.flags </span><span style="color:#D73A49;">&amp;=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">~</span><span style="color:#24292E;">ContentReset</span></span>
<span class="line highlighted"><span style="color:#24292E;">      }</span></span>
<span class="line"></span>
<span class="line highlighted"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// 获取当前 Fiber 节点的 DOM 兄弟节点</span></span>
<span class="line highlighted"><span style="color:#24292E;">      </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">before</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getHostSibling</span><span style="color:#24292E;">(finishedWork)</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// We only have the top Fiber that was inserted but we need to recurse down its</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// children to find all the terminal nodes.</span></span>
<span class="line highlighted"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// 递归插入所有的子节点</span></span>
<span class="line highlighted"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">insertOrAppendPlacementNode</span><span style="color:#24292E;">(finishedWork, before, parent)</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">break</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// React 根节点</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> HostRoot:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// React Portal 节点</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> HostPortal: {</span></span>
<span class="line highlighted"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// 获取 DOM 节点</span></span>
<span class="line highlighted"><span style="color:#24292E;">      </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">parent</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Container</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> parentFiber.stateNode.containerInfo</span></span>
<span class="line highlighted"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// 获取当前 Fiber 节点的 DOM 兄弟节点</span></span>
<span class="line highlighted"><span style="color:#24292E;">      </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">before</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getHostSibling</span><span style="color:#24292E;">(finishedWork)</span></span>
<span class="line highlighted"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// 递归插入所有的子节点</span></span>
<span class="line highlighted"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">insertOrAppendPlacementNodeIntoContainer</span><span style="color:#24292E;">(finishedWork, before, parent)</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">break</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// eslint-disable-next-line-no-fallthrough</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">default</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Error</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&#39;Invalid host parent fiber. This error is likely caused by a bug &#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#032F62;">&#39;in React. Please file an issue.&#39;</span></span>
<span class="line"><span style="color:#24292E;">      )</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br></div></div>`,32),o=[e];function r(t,c,E,i,y,b){return n(),a("div",null,o)}const m=s(p,[["render",r]]);export{u as __pageData,m as default};
