import{_ as o,h as l,a8 as c,o as i}from"./chunks/framework.BU7NHiAd.js";const h=JSON.parse('{"title":"Webpack","description":"前端物语：记录一些面试需要的 Webpack 理论知识点","frontmatter":{"description":"前端物语：记录一些面试需要的 Webpack 理论知识点"},"headers":[],"relativePath":"fe/webpack/index.md","filePath":"fe/webpack/index.md","lastUpdated":1696940288000}'),a={name:"fe/webpack/index.md"};function d(r,e,t,n,p,s){return i(),l("div",null,e[0]||(e[0]=[c('<h1 id="webpack" tabindex="-1">Webpack <a class="header-anchor" href="#webpack" aria-label="Permalink to &quot;Webpack&quot;">​</a></h1><p>Webpack 是一个用于现代 <code>JavaScript</code> 应用程序的静态模块打包工具</p><ul><li><a href="https://webpack.js.org" target="_blank" rel="noreferrer">Webpack 英文官网</a></li><li><a href="https://www.webpackjs.com" target="_blank" rel="noreferrer">Webpack 中文官网</a></li></ul><h2 id="核心概念" tabindex="-1">核心概念 <a class="header-anchor" href="#核心概念" aria-label="Permalink to &quot;核心概念&quot;">​</a></h2><ul><li><code>entry</code> 编译的入口文件</li><li><code>output</code> 如何输出以及在哪里输出</li><li><code>module</code> Webpack 一切皆模块，一个模块对应一个文件</li><li><code>chunk</code> 代码块，由多个 module 组成</li><li><code>loader</code> Webpack 通过不同的 loader 对模块的源代码进行转换</li><li><code>plugin</code> 插件 Webpack 在打包构建的生命周期中提供了不同的 hooks 允许调用方能够对打包的资源注入自己的逻辑处理</li><li><code>compiler</code> 编译器，把控整个 Webpack 打包的构建流程</li><li><code>compilation</code> 每一次构建的上下文对象包含了当次构建的所有信息</li><li><code>dependence</code> 记录模块间依赖关系</li></ul><h2 id="构建流程" tabindex="-1">构建流程 <a class="header-anchor" href="#构建流程" aria-label="Permalink to &quot;构建流程&quot;">​</a></h2><h3 id="init-初始化阶段" tabindex="-1"><code>Init</code> 初始化阶段 <a class="header-anchor" href="#init-初始化阶段" aria-label="Permalink to &quot;`Init` 初始化阶段&quot;">​</a></h3><ol><li>解析命令行与 <code>webpack.config.js</code> 配置的参数，合并生成最后的配置</li><li>创建 <code>compiler</code> 对象并开始启动插件 <ol><li>调用 <code>createCompiler</code> 函数创建 <code>compiler</code> 对象</li><li>遍历注册的 <code>Plugins</code> 并执行其 <code>apply</code> 方法</li><li>调用 <code>new WebpackOptionsApply().process</code> 方法，根据配置内容动态注入相应插件 <ol><li>调用 <code>EntryOptionPlugin</code> 插件，该插件根据 <code>entry</code> 值注入 <code>DynamicEntryPlugin</code> 或 <code>EntryPlugin</code> 插件</li><li>根据 <code>devtool</code> 值注入 <code>Sourcemap</code> 插件 <ol><li><code>SourceMapDevToolPlugin</code></li><li><code>EvalSourceMapDevToolPlugin</code></li><li><code>EvalDevToolModulePlugin</code></li></ol></li><li>注入 <code>RuntimePlugin</code> 用于根据代码内容动态注入 <code>webpack</code> 运行时</li></ol></li><li>调用 <code>compiler.compile</code> 方法开始执行构建</li></ol></li></ol><h3 id="make-构建阶段" tabindex="-1"><code>Make</code> 构建阶段 <a class="header-anchor" href="#make-构建阶段" aria-label="Permalink to &quot;`Make` 构建阶段&quot;">​</a></h3><ol><li>读入文件内容</li><li>调用 <code>Loader</code> 将模块转译为标准的 <code>JS</code> 内容</li><li>调用 <code>acorn</code> 生成 <code>AST</code> 语法树</li><li>分析 <code>AST</code> 确定模块依赖列表</li><li>解析模块依赖（对每一个依赖模块重新执行上述流程，直到生成完整的模块依赖图 —— <code>ModuleGraph</code> 对象）</li></ol><h3 id="seal-生成阶段" tabindex="-1"><code>Seal</code> 生成阶段 <a class="header-anchor" href="#seal-生成阶段" aria-label="Permalink to &quot;`Seal` 生成阶段&quot;">​</a></h3><ol><li>遍历模块依赖图并执行操作 <ol><li>代码转译，如 <code>import</code> 转换为 <code>require</code> 调用</li><li>分析运行时依赖</li></ol></li><li>合并模块代码与运行时代码并生成 <code>chunk</code></li><li>执行产物优化操作 <ol><li><code>Tree-shaking</code></li><li>压缩</li><li><code>Code Split</code></li></ol></li><li>输出结果（根据配置确定输出的路径和文件名，把文件内容写入到文件系统）</li></ol>',12)]))}const k=o(a,[["render",d]]);export{h as __pageData,k as default};
