import{_ as s,v as a,b as l,R as n}from"./chunks/framework.975b469a.js";const b=JSON.parse('{"title":"Tree-Shaking 相关笔记","description":"","frontmatter":{},"headers":[],"relativePath":"daily-notes/issue-5.md","filePath":"daily-notes/issue-5.md","lastUpdated":null}'),e={name:"daily-notes/issue-5.md"},p=n(`<h1 id="tree-shaking-相关笔记" tabindex="-1">Tree-Shaking 相关笔记 <a class="header-anchor" href="#tree-shaking-相关笔记" aria-label="Permalink to &quot;Tree-Shaking 相关笔记&quot;">​</a></h1><div class="tip custom-block"><p class="custom-block-title">原文地址</p><p><a href="https://github.com/maomao1996/daily-notes/issues/5" target="_blank" rel="noreferrer">Tree-Shaking 相关笔记 | GitHub</a></p></div><p>今天同事做完项目改造 <code>Code Review</code> 时，对 <code>api</code> 的导出形式有了点小讨论，于是今天的学习就有了</p><p>改造前</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> get1 </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">()</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> get2 </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">()</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> get3 </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">()</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>改造后</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;font-style:italic;">default</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#F07178;">get1</span><span style="color:#89DDFF;">()</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{},</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#F07178;">get2</span><span style="color:#89DDFF;">()</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{},</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#F07178;">get3</span><span style="color:#89DDFF;">()</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>当看完改造前后的代码我提出了异议：改造后的代码不利于 <code>webpack</code> 做 <code>tree-shaking</code>，但是代码已经改动了，都改成了这样的调用方式</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#BABED8;"> api </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">api</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">api</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">get1</span><span style="color:#BABED8;">()</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">then</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">res</span><span style="color:#89DDFF;">)</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{}</span><span style="color:#BABED8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>于是喜欢偷懒的我提出使用模块整体加载语法来减少代码改动</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">*</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;font-style:italic;">as</span><span style="color:#BABED8;"> api </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">api</span><span style="color:#89DDFF;">&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>当提出这个解决方案后，我就给自己提了一个问: 使用模块整体加载语法会不会影响 <code>webpack</code> 做 <code>tree-shaking</code>，然后我进行打包实验了一番</p><p>先定义一个 <code>api</code> 模块</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> get1 </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">()</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> get2 </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">()</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> get3 </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">()</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>然后通过模块整体加载语法引入 <code>api</code> 模块</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">*</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;font-style:italic;">as</span><span style="color:#BABED8;"> api </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">api</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">api</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">get1</span><span style="color:#BABED8;">()</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>通过打包后发现模块整体加载语法不会影响 <code>tree-shaking</code> ，我们没有用到的 <code>get2</code> <code>get3</code> 都被移除了</p><p>总所周知 <code>es6</code> 在对象上扩展了属性名表达式，如果我们通过这种方式来调用 <code>api</code> 模块的方法会怎么样呢（我当时想着，这么简单的字符串拼接应该不会影响 <code>tree-shaking</code> 的 ）</p><p><a href="http://rollupjs.org/repl/?version=2.39.0&amp;shareable=JTdCJTIybW9kdWxlcyUyMiUzQSU1QiU3QiUyMm5hbWUlMjIlM0ElMjJtYWluLmpzJTIyJTJDJTIyY29kZSUyMiUzQSUyMiUyRiolMjBUUkVFLVNIQUtJTkclMjAqJTJGJTVDbmltcG9ydCUyMColMjBhcyUyMGFwaSUyMGZyb20lMjAnLiUyRmFwaS5qcyclM0IlNUNuJTVDbmFwaS5nZXQxKCklNUNuJTVDbmNvbnNvbGUubG9nKCUyMGFwaS5nZXQxKCklMjApJTNCJTIyJTJDJTIyaXNFbnRyeSUyMiUzQXRydWUlN0QlMkMlN0IlMjJuYW1lJTIyJTNBJTIyYXBpLmpzJTIyJTJDJTIyY29kZSUyMiUzQSUyMiUyRiUyRiUyMGFwaS5qcyU1Q24lNUNuZXhwb3J0JTIwY29uc3QlMjBnZXQxJTIwJTNEJTIwKCklMjAlM0QlM0UlMjAxJTVDbiU1Q25leHBvcnQlMjBjb25zdCUyMGdldDIlMjAlM0QlMjAoKSUyMCUzRCUzRSUyMDIlNUNuJTVDbmV4cG9ydCUyMGNvbnN0JTIwZ2V0MyUyMCUzRCUyMCgpJTIwJTNEJTNFJTIwMyUyMiUyQyUyMmlzRW50cnklMjIlM0FmYWxzZSU3RCU1RCUyQyUyMm9wdGlvbnMlMjIlM0ElN0IlMjJmb3JtYXQlMjIlM0ElMjJlcyUyMiUyQyUyMm5hbWUlMjIlM0ElMjJteUJ1bmRsZSUyMiUyQyUyMmFtZCUyMiUzQSU3QiUyMmlkJTIyJTNBJTIyJTIyJTdEJTJDJTIyZ2xvYmFscyUyMiUzQSU3QiU3RCU3RCUyQyUyMmV4YW1wbGUlMjIlM0FudWxsJTdE" target="_blank" rel="noreferrer">在线 Demo</a></p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">*</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;font-style:italic;">as</span><span style="color:#BABED8;"> api </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">api</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> get </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">get</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">api[get </span><span style="color:#89DDFF;">+</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">1</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">]()</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>再次打包分析，发现 <code>tree-shaking</code> 失效了，<code>get1</code> <code>get2</code> <code>get3</code> 都还在代码里面</p><p><a href="http://rollupjs.org/repl/?version=2.39.0&amp;shareable=JTdCJTIybW9kdWxlcyUyMiUzQSU1QiU3QiUyMm5hbWUlMjIlM0ElMjJtYWluLmpzJTIyJTJDJTIyY29kZSUyMiUzQSUyMiUyRiolMjBUUkVFLVNIQUtJTkclMjAqJTJGJTVDbmltcG9ydCUyMColMjBhcyUyMGFwaSUyMGZyb20lMjAnLiUyRmFwaS5qcyclM0IlNUNuJTVDbmNvbnN0JTIwZ2V0JTIwJTNEJTIwJ2dldCclNUNuJTVDbmNvbnNvbGUubG9nKCUyMGFwaSU1QmdldCUyMCUyQiUyMCcxJyU1RCgpJTIwKSUzQiUyMiUyQyUyMmlzRW50cnklMjIlM0F0cnVlJTdEJTJDJTdCJTIybmFtZSUyMiUzQSUyMmFwaS5qcyUyMiUyQyUyMmNvZGUlMjIlM0ElMjIlMkYlMkYlMjBhcGkuanMlNUNuJTVDbmV4cG9ydCUyMGNvbnN0JTIwZ2V0MSUyMCUzRCUyMCgpJTIwJTNEJTNFJTIwMSU1Q24lNUNuZXhwb3J0JTIwY29uc3QlMjBnZXQyJTIwJTNEJTIwKCklMjAlM0QlM0UlMjAyJTVDbiU1Q25leHBvcnQlMjBjb25zdCUyMGdldDMlMjAlM0QlMjAoKSUyMCUzRCUzRSUyMDMlMjIlMkMlMjJpc0VudHJ5JTIyJTNBZmFsc2UlN0QlNUQlMkMlMjJvcHRpb25zJTIyJTNBJTdCJTIyZm9ybWF0JTIyJTNBJTIyZXMlMjIlMkMlMjJuYW1lJTIyJTNBJTIybXlCdW5kbGUlMjIlMkMlMjJhbWQlMjIlM0ElN0IlMjJpZCUyMiUzQSUyMiUyMiU3RCUyQyUyMmdsb2JhbHMlMjIlM0ElN0IlN0QlN0QlMkMlMjJleGFtcGxlJTIyJTNBbnVsbCU3RA==" target="_blank" rel="noreferrer">在线 Demo</a></p><h2 id="结论" tabindex="-1">结论 <a class="header-anchor" href="#结论" aria-label="Permalink to &quot;结论&quot;">​</a></h2><ul><li>术语版：当你使用模块整体加载语法不使用属性名表达式时不影响 <code>tree-shaking</code></li><li>通俗版：当你 <code>import * as xx from &#39;xxx&#39;</code> 引入一个模块，使用字符串拼接的形式调用 <code>xx</code> 的方法时是不可以去除没有用到的代码（今天有人说我被 997 搞的表达能力不行了）</li></ul><h2 id="相关知识点" tabindex="-1">相关知识点 <a class="header-anchor" href="#相关知识点" aria-label="Permalink to &quot;相关知识点&quot;">​</a></h2><ul><li><a href="https://www.webpackjs.com/guides/tree-shaking/" target="_blank" rel="noreferrer"><code>tree-shaking</code></a></li><li><a href="https://es6.ruanyifeng.com/#docs/module#%E6%A8%A1%E5%9D%97%E7%9A%84%E6%95%B4%E4%BD%93%E5%8A%A0%E8%BD%BD" target="_blank" rel="noreferrer">模块的整体加载</a></li><li><a href="https://es6.ruanyifeng.com/#docs/object#%E5%B1%9E%E6%80%A7%E5%90%8D%E8%A1%A8%E8%BE%BE%E5%BC%8F" target="_blank" rel="noreferrer">属性名表达式</a></li></ul><h2 id="tree-shaking-相关学习资料" tabindex="-1">Tree-Shaking 相关学习资料 <a class="header-anchor" href="#tree-shaking-相关学习资料" aria-label="Permalink to &quot;Tree-Shaking 相关学习资料&quot;">​</a></h2><ul><li><a href="https://juejin.im/post/5a4dc842518825698e7279a9" target="_blank" rel="noreferrer">Tree-Shaking 性能优化实践 - 原理篇</a></li><li><a href="https://segmentfault.com/a/1190000012794598" target="_blank" rel="noreferrer">你的 Tree-Shaking 并没什么卵用</a></li><li><a href="https://juejin.im/post/5bb8ef58f265da0a972e3434" target="_blank" rel="noreferrer">Webpack Tree shaking 深入探究</a></li></ul>`,28),o=[p];function t(r,c,i,y,D,d){return a(),l("div",null,o)}const B=s(e,[["render",t]]);export{b as __pageData,B as default};
